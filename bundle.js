(()=>{"use strict";var t={208:(t,e,n)=>{n.d(e,{A:()=>s});var o=n(354),r=n.n(o),a=n(314),i=n.n(a)()(r());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]),i.push([t.id,'* {\n  font-family: "Poppins", sans-serif;\n}\n.board-container {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n.board {\n  border-collapse: collapse;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #333;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n/* .cell:hover {\n  background-color: #eee;\n} */\n.ship {\n  background-color: rgba(45, 199, 255, 0.62);\n}\n\n.ship-position-prohibited {\n  background-color: rgba(255, 60, 60, 0.62);\n}\n.ship-position-allowed {\n  background-color: rgba(61, 255, 90, 0.62);\n}\n/* Missed cell */\n.missed {\n  position: relative;\n  background-color: #ebebeb;\n}\n\n.missed::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  background-color: #343434; /* Color of the dot */\n  border-radius: 50%; /* Make it a circle */\n}\n\n/* Hit cell */\n.hit {\n  position: relative;\n  background-color: #ffe4df;\n}\n\n.hit::before,\n.hit::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 12px;\n  height: 2px;\n  background-color: #f34628; /* Color of the cross */\n}\n\n.hit::before {\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n\n.hit::after {\n  transform: translate(-50%, -50%) rotate(-45deg);\n}\nheader h1 {\n  margin: 30px;\n  font-size: 40px;\n  text-align: center;\n  text-transform: uppercase;\n}\na {\n  margin-left: 10px;\n  color: black;\n}\ni {\n  font-size: 45px;\n}\n/* BOX INFO */\n\n.box-info,\n.player-box,\n.computer-box {\n  margin: 20px;\n}\n.box-info {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n\n.title {\n  text-align: center;\n  font-size: 35px;\n  font-weight: bold;\n}\n.state > p:first-child {\n  font-size: 20px;\n  text-align: center;\n  margin: 10px;\n  font-weight: 600;\n}\n\n.current-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ship-direction {\n  color: rgb(2, 209, 255);\n  background-color: white;\n  border: 1px solid rgb(2, 209, 255);\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n}\n\n/* BOX DIALOG */\n\n/*   Open state of the dialog  */\ndialog[open] {\n  opacity: 1;\n  transform: scaleY(1);\n}\n\n/*   Closed state of the dialog   */\ndialog {\n  opacity: 0;\n  transform: scaleY(0);\n  transition: opacity 0.7s ease-out, transform 0.7s ease-out,\n    overlay 0.7s ease-out allow-discrete, display 0.7s ease-out allow-discrete;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\n/*   Before-open state  */\n/* Needs to be after the previous dialog[open] rule to take effect,\n    as the specificity is the same */\n@starting-style {\n  dialog[open] {\n    opacity: 0;\n    transform: scaleY(0);\n  }\n}\n\n/* Transition the :backdrop when the dialog modal is promoted to the top layer */\ndialog::backdrop {\n  background-color: rgb(0 0 0 / 0%);\n  transition: display 0.7s allow-discrete, overlay 0.7s allow-discrete,\n    background-color 0.7s;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\ndialog[open]::backdrop {\n  background-color: rgb(0 0 0 / 25%);\n}\n\n/* This starting-style rule cannot be nested inside the above selector\nbecause the nesting selector cannot represent pseudo-elements. */\n\n@starting-style {\n  dialog[open]::backdrop {\n    background-color: rgb(0 0 0 / 0%);\n  }\n}\n\nul {\n  list-style-type: none;\n  display: flex;\n  justify-content: space-around;\n}\n\nli {\n  display: flex;\n  align-items: center;\n}\nbutton.close {\n  margin-left: 500px;\n  padding: 5px 10px;\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,kCAAkC;AACpC;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,gBAAgB;AAClB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,eAAe;EACf,eAAe;AACjB;;AAEA;;GAEG;AACH;EACE,0CAA0C;AAC5C;;AAEA;EACE,yCAAyC;AAC3C;AACA;EACE,yCAAyC;AAC3C;AACA,gBAAgB;AAChB;EACE,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,UAAU;EACV,WAAW;EACX,yBAAyB,EAAE,qBAAqB;EAChD,kBAAkB,EAAE,qBAAqB;AAC3C;;AAEA,aAAa;AACb;EACE,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;;EAEE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,WAAW;EACX,yBAAyB,EAAE,uBAAuB;AACpD;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,+CAA+C;AACjD;AACA;EACE,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,yBAAyB;AAC3B;AACA;EACE,iBAAiB;EACjB,YAAY;AACd;AACA;EACE,eAAe;AACjB;AACA,aAAa;;AAEb;;;EAGE,YAAY;AACd;AACA;EACE,aAAa;EACb,qCAAqC;AACvC;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;EAClC,eAAe;EACf,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA,eAAe;;AAEf,gCAAgC;AAChC;EACE,UAAU;EACV,oBAAoB;AACtB;;AAEA,mCAAmC;AACnC;EACE,UAAU;EACV,oBAAoB;EACpB;8EAC4E;EAC5E;wCACsC;AACxC;;AAEA,yBAAyB;AACzB;oCACoC;AACpC;EACE;IACE,UAAU;IACV,oBAAoB;EACtB;AACF;;AAEA,gFAAgF;AAChF;EACE,iCAAiC;EACjC;yBACuB;EACvB;wCACsC;AACxC;;AAEA;EACE,kCAAkC;AACpC;;AAEA;gEACgE;;AAEhE;EACE;IACE,iCAAiC;EACnC;AACF;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,iBAAiB;EACjB,uBAAuB;EACvB,YAAY;EACZ,uBAAuB;AACzB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");\n\n* {\n  font-family: "Poppins", sans-serif;\n}\n.board-container {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n.board {\n  border-collapse: collapse;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #333;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n/* .cell:hover {\n  background-color: #eee;\n} */\n.ship {\n  background-color: rgba(45, 199, 255, 0.62);\n}\n\n.ship-position-prohibited {\n  background-color: rgba(255, 60, 60, 0.62);\n}\n.ship-position-allowed {\n  background-color: rgba(61, 255, 90, 0.62);\n}\n/* Missed cell */\n.missed {\n  position: relative;\n  background-color: #ebebeb;\n}\n\n.missed::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  background-color: #343434; /* Color of the dot */\n  border-radius: 50%; /* Make it a circle */\n}\n\n/* Hit cell */\n.hit {\n  position: relative;\n  background-color: #ffe4df;\n}\n\n.hit::before,\n.hit::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 12px;\n  height: 2px;\n  background-color: #f34628; /* Color of the cross */\n}\n\n.hit::before {\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n\n.hit::after {\n  transform: translate(-50%, -50%) rotate(-45deg);\n}\nheader h1 {\n  margin: 30px;\n  font-size: 40px;\n  text-align: center;\n  text-transform: uppercase;\n}\na {\n  margin-left: 10px;\n  color: black;\n}\ni {\n  font-size: 45px;\n}\n/* BOX INFO */\n\n.box-info,\n.player-box,\n.computer-box {\n  margin: 20px;\n}\n.box-info {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n\n.title {\n  text-align: center;\n  font-size: 35px;\n  font-weight: bold;\n}\n.state > p:first-child {\n  font-size: 20px;\n  text-align: center;\n  margin: 10px;\n  font-weight: 600;\n}\n\n.current-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ship-direction {\n  color: rgb(2, 209, 255);\n  background-color: white;\n  border: 1px solid rgb(2, 209, 255);\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n}\n\n/* BOX DIALOG */\n\n/*   Open state of the dialog  */\ndialog[open] {\n  opacity: 1;\n  transform: scaleY(1);\n}\n\n/*   Closed state of the dialog   */\ndialog {\n  opacity: 0;\n  transform: scaleY(0);\n  transition: opacity 0.7s ease-out, transform 0.7s ease-out,\n    overlay 0.7s ease-out allow-discrete, display 0.7s ease-out allow-discrete;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\n/*   Before-open state  */\n/* Needs to be after the previous dialog[open] rule to take effect,\n    as the specificity is the same */\n@starting-style {\n  dialog[open] {\n    opacity: 0;\n    transform: scaleY(0);\n  }\n}\n\n/* Transition the :backdrop when the dialog modal is promoted to the top layer */\ndialog::backdrop {\n  background-color: rgb(0 0 0 / 0%);\n  transition: display 0.7s allow-discrete, overlay 0.7s allow-discrete,\n    background-color 0.7s;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\ndialog[open]::backdrop {\n  background-color: rgb(0 0 0 / 25%);\n}\n\n/* This starting-style rule cannot be nested inside the above selector\nbecause the nesting selector cannot represent pseudo-elements. */\n\n@starting-style {\n  dialog[open]::backdrop {\n    background-color: rgb(0 0 0 / 0%);\n  }\n}\n\nul {\n  list-style-type: none;\n  display: flex;\n  justify-content: space-around;\n}\n\nli {\n  display: flex;\n  align-items: center;\n}\nbutton.close {\n  margin-left: 500px;\n  padding: 5px 10px;\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n}\n'],sourceRoot:""}]);const s=i},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var A=0;A<t.length;A++){var c=[].concat(t[A]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var a={},i=[],s=0;s<t.length;s++){var l=t[s],A=o.base?l[0]+o.base:l[0],c=a[A]||0,d="".concat(A," ").concat(c);a[A]=c+1;var p=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=r(h,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:u,references:1})}i.push(d)}return i}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var a=o(t=t||[],r=r||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var l=o(t,r),A=0;A<a.length;A++){var c=n(a[A]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=l}}},659:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=new Set;class e{constructor(t=10){this.size=t,this.grid=Array.from({length:t},(()=>Array(t).fill(null))),this.ships=[],this.missedAttacks=[]}placeShip(t,e,n){const o=[];let a=e,i=n;for(let s=0;s<t.length;s++){if(r(e,n))throw new Error("Ship placement out of bounds.");if(null!==this.grid[i][a])throw new Error("Another ship is already placed here.");if(o.push([a,i]),"horizontal"===t.direction)a++;else{if("vertical"!==t.direction)throw new Error('Invalid direction. Use "horizontal" or "vertical".');i++}}o.forEach((([e,n])=>{this.grid[n][e]=t})),this.ships.push({ship:t,shipPositions:o})}canThisShipBePlacedHere(t,e,n){let o=parseInt(n),a=parseInt(e);for(let e=0;e<t.length;e++){if(r(o,a))return console.log("Ship placement out of bounds."),!1;if(null!==this.grid[a][o])return console.log(`PosX: ${o}, ${a}`),console.log("Another ship is already placed here."),!1;if("horizontal"===t.direction)o++;else{if("vertical"!==t.direction)return console.log("Invalid direction. Use 'horizontal' or 'vertical'"),!1;a++}}return console.log("Ok"),!0}receiveAttack(t,e){if(t<0||t>=this.size||e<0||e>=this.size)throw new Error("Attack out of bounds.");const n=this.grid[e][t];return null===n?(this.missedAttacks.push([t,e]),"Miss!"):(n.hit(),`Hit on ${n.name}!`)}haveAllShipsBeenSunk(){return this.ships.map((t=>t.ship.isSunk)).every((t=>!0===t))}displayBoard(t){document.addEventListener("DOMContentLoaded",(()=>{let e=0;this.grid.forEach((n=>{const o=document.createElement("tr");let r=0;n.forEach((t=>{const n=document.createElement("td");n.classList.add("cell"),n.setAttribute("data-x",r),n.setAttribute("data-y",e),r++,o.appendChild(n)})),e++,t.appendChild(o)}))}))}}class o extends e{constructor(){super()}allowPlayerToAttackComputer(t,e,n){const o=Array.from(t.getElementsByClassName("cell")),r=t=>{"Miss!"==this.receiveAttack(t.target.getAttribute("data-x"),t.target.getAttribute("data-y"))?t.target.classList.add("missed"):t.target.classList.add("hit"),this.attackPlayerBoard(e,n)};o.forEach((t=>{t.addEventListener("click",r)}))}attackPlayerBoard(e,n){const[o,r]=function(){let e,n;do{e=Math.floor(10*Math.random()),n=Math.floor(10*Math.random())}while(t.has(`${e}-${n}`));return t.add(`${e}-${n}`),[e,n]}();"Miss!"==e.receiveAttack(o,r)?n.querySelector(`td[data-x="${o}"][data-y="${r}"]`).classList.add("missed"):n.querySelector(`td[data-x="${o}"][data-y="${r}"]`).classList.add("hit")}}function r(t,e){return!(a(10).includes(parseInt(t))&&a(10).includes(parseInt(e)))}function a(t){var e=[];for(let n=0;n<t;n++)e.push(n);return e}class i{constructor(t,e,n="horizontal"){this.name=t,this.hits=0,this.length=e,this.direction=n,this.isSunk=!1}hit(){this.hits++,this.hits===this.length&&(this.isSunk=!0)}}var s=n(72),l=n.n(s),A=n(825),c=n.n(A),d=n(659),p=n.n(d),h=n(56),u=n.n(h),f=n(540),C=n.n(f),g=n(113),E=n.n(g),B=n(208),y={};y.styleTagTransform=E(),y.setAttributes=u(),y.insert=p().bind(null,"head"),y.domAPI=c(),y.insertStyleElement=C(),l()(B.A,y),B.A&&B.A.locals&&B.A.locals;const m=document.getElementById("dialog");document.querySelector(".close").addEventListener("click",(()=>{m.close()})),(new class{constructor(){this.shipDirectionButton=document.getElementById("ship-direction"),this.allPlayerShips=[],this.playerBoard=new e,this.computerBoard=new o,this.playerBoardDOM=document.getElementById("player-board"),this.computerBoardDOM=document.getElementById("computer-board"),this.currentPlayer="player",this.playerShipNamesAndLength=[["Battleship",5],["Kraken",4],["Bull Dog",3],["Titan",2],["Warrior",2],["Tiki",1]]}setUpBoards(){this.playerBoard.displayBoard(this.playerBoardDOM),this.computerBoard.displayBoard(this.computerBoardDOM),this.startPlaceShipProcess()}startPlaceShipProcess(){document.addEventListener("DOMContentLoaded",(()=>{const t=this.playerBoardDOM.querySelectorAll(".cell");for(const e of t)this.addMouseOverEffectOn(e),this.addMouseOutEffectOn(e),this.addClickEffectOn(e)}))}addMouseOverEffectOn(t){t.addEventListener("mouseover",(()=>{if(this.playerShipNamesAndLength.length>0){const e=t.getAttribute("data-x"),n=t.getAttribute("data-y"),o=this.playerShipNamesAndLength[0];console.log(o);const r=new i(...o);if(r.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(r,n,e)){let t=parseInt(e),o=parseInt(n);for(let e=0;e<r.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.add("ship-position-allowed"),"horizontal"===r.direction?t++:o++}else{let t=parseInt(e),o=parseInt(n);for(let e=0;e<r.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.add("ship-position-prohibited"),"horizontal"===r.direction?t++:o++}}}))}addMouseOutEffectOn(t){t.addEventListener("mouseout",(()=>{if(this.playerShipNamesAndLength.length>0){const e=t.getAttribute("data-x"),n=t.getAttribute("data-y"),o=this.playerShipNamesAndLength[0];console.log(o);const r=new i(...o);if(r.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(r,n,e)){let t=parseInt(e),o=parseInt(n);for(let e=0;e<r.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.remove("ship-position-allowed"),"horizontal"===r.direction?t++:o++}else{let t=parseInt(e),o=parseInt(n);for(let e=0;e<r.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.remove("ship-position-prohibited"),"horizontal"===r.direction?t++:o++}}}))}addClickEffectOn(t){t.addEventListener("click",(()=>{if(this.playerShipNamesAndLength.length>0){const e=t.getAttribute("data-x"),n=t.getAttribute("data-y");if(this.playerBoard.canThisShipBePlacedHere(new i(...this.playerShipNamesAndLength[0],this.shipDirectionButton.textContent),n,e)){const t=this.playerShipNamesAndLength.shift();console.log(t);const o=new i(...t);if(o.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(o,n,e)){this.playerBoard.placeShip(o,e,n);let t=parseInt(e),r=parseInt(n);for(let e=0;e<o.length;e++){const e=this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${r}"]`);e.classList.remove("ship-position-allowed"),e.classList.add("ship"),"horizontal"===o.direction?t++:r++,0==this.playerShipNamesAndLength.length&&this.startGame()}document.getElementById("ship-left-to-place").textContent=`${this.playerShipNamesAndLength.length} ships left to place`}}}}))}startGame(){const t=new i("Buto",3,"vertical");this.computerBoard.placeShip(t,0,0),this.computerBoard.allowPlayerToAttackComputer(this.computerBoardDOM,this.playerBoard,this.playerBoardDOM)}}).setUpBoards();const b=document.getElementById("ship-direction");b.addEventListener("click",(()=>{"horizontal"==b.textContent?b.textContent="vertical":b.textContent="horizontal"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,