(()=>{var t={208:(t,n,e)=>{"use strict";e.d(n,{A:()=>p});var o=e(354),r=e.n(o),s=e(314),a=e.n(s),i=e(417),l=e.n(i),c=new URL(e(456),e.b),A=a()(r());A.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]);var d=l()(c);A.push([t.id,`@font-face {\n  font-family: Astronomus;\n  src: url(${d});\n}\n\n* {\n  font-family: "Poppins", sans-serif;\n}\n.board-container {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n.board {\n  border-collapse: collapse;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #333;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n/* .cell:hover {\n  background-color: #eee;\n} */\n.ship {\n  background-color: rgba(45, 199, 255, 0.62);\n}\n\n.ship-position-prohibited {\n  background-color: rgba(255, 60, 60, 0.62);\n}\n.ship-position-allowed {\n  background-color: rgba(61, 255, 90, 0.62);\n}\n/* Missed cell */\n.missed {\n  position: relative;\n  background-color: #ebebeb;\n}\n\n.missed::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  background-color: #343434; /* Color of the dot */\n  border-radius: 50%; /* Make it a circle */\n}\n\n/* Hit cell */\n.hit {\n  position: relative;\n  background-color: #ffe4df;\n}\n\n.hit::before,\n.hit::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 12px;\n  height: 2px;\n  background-color: #f34628; /* Color of the cross */\n}\n\n.hit::before {\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n\n.hit::after {\n  transform: translate(-50%, -50%) rotate(-45deg);\n}\nheader h1 {\n  margin: 20px;\n  font-size: 60px;\n  font-family: Astronomus;\n  text-transform: uppercase;\n}\na {\n  margin-left: 5px;\n  color: black;\n}\ni {\n  font-size: 55px;\n}\n/* BOX INFO */\n\n.box-info,\n.player-box,\n.computer-box {\n  margin: 20px;\n}\n.box-info {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n\n.title {\n  text-align: center;\n  font-size: 35px;\n  font-weight: bold;\n}\n.state > p:first-child {\n  font-size: 20px;\n  text-align: center;\n  margin: 10px;\n  font-weight: 600;\n}\n\n.current-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ship-direction {\n  color: rgb(2, 209, 255);\n  background-color: white;\n  border: 1px solid rgb(2, 209, 255);\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n}\n\n/* BOX DIALOG */\n\n/*   Open state of the dialog  */\ndialog[open] {\n  opacity: 1;\n  transform: scaleY(1);\n}\n\n/*   Closed state of the dialog   */\ndialog {\n  opacity: 0;\n  transform: scaleY(0);\n  transition: opacity 0.7s ease-out, transform 0.7s ease-out,\n    overlay 0.7s ease-out allow-discrete, display 0.7s ease-out allow-discrete;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\n/*   Before-open state  */\n/* Needs to be after the previous dialog[open] rule to take effect,\n    as the specificity is the same */\n@starting-style {\n  dialog[open] {\n    opacity: 0;\n    transform: scaleY(0);\n  }\n}\n\n/* Transition the :backdrop when the dialog modal is promoted to the top layer */\ndialog::backdrop {\n  background-color: rgb(0 0 0 / 0%);\n  transition: display 0.7s allow-discrete, overlay 0.7s allow-discrete,\n    background-color 0.7s;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\ndialog[open]::backdrop {\n  background-color: rgb(0 0 0 / 25%);\n}\n\n/* This starting-style rule cannot be nested inside the above selector\nbecause the nesting selector cannot represent pseudo-elements. */\n\n@starting-style {\n  dialog[open]::backdrop {\n    background-color: rgb(0 0 0 / 0%);\n  }\n}\n\nul {\n  list-style-type: none;\n  display: flex;\n  justify-content: space-around;\n}\n\nli {\n  display: flex;\n  align-items: center;\n}\nbutton.close,\nbutton.replay {\n  margin-left: 500px;\n  padding: 5px 10px;\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n  border-radius: 3px;\n  font-weight: bold;\n  transition: 1000ms;\n}\n\nbutton.replay {\n  margin-left: 250px;\n}\n\nbutton.close,\nbutton.replay:hover {\n  color: white;\n  background-color: black;\n}\n#gameOverDialog h1 {\n  text-align: center;\n  font-family: Astronomus;\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,uBAAuB;EACvB,4CAA8B;AAChC;;AAEA;EACE,kCAAkC;AACpC;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,gBAAgB;AAClB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,eAAe;EACf,eAAe;AACjB;;AAEA;;GAEG;AACH;EACE,0CAA0C;AAC5C;;AAEA;EACE,yCAAyC;AAC3C;AACA;EACE,yCAAyC;AAC3C;AACA,gBAAgB;AAChB;EACE,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,UAAU;EACV,WAAW;EACX,yBAAyB,EAAE,qBAAqB;EAChD,kBAAkB,EAAE,qBAAqB;AAC3C;;AAEA,aAAa;AACb;EACE,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;;EAEE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,WAAW;EACX,yBAAyB,EAAE,uBAAuB;AACpD;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,+CAA+C;AACjD;AACA;EACE,YAAY;EACZ,eAAe;EACf,uBAAuB;EACvB,yBAAyB;AAC3B;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,eAAe;AACjB;AACA,aAAa;;AAEb;;;EAGE,YAAY;AACd;AACA;EACE,aAAa;EACb,qCAAqC;AACvC;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;EAClC,eAAe;EACf,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA,eAAe;;AAEf,gCAAgC;AAChC;EACE,UAAU;EACV,oBAAoB;AACtB;;AAEA,mCAAmC;AACnC;EACE,UAAU;EACV,oBAAoB;EACpB;8EAC4E;EAC5E;wCACsC;AACxC;;AAEA,yBAAyB;AACzB;oCACoC;AACpC;EACE;IACE,UAAU;IACV,oBAAoB;EACtB;AACF;;AAEA,gFAAgF;AAChF;EACE,iCAAiC;EACjC;yBACuB;EACvB;wCACsC;AACxC;;AAEA;EACE,kCAAkC;AACpC;;AAEA;gEACgE;;AAEhE;EACE;IACE,iCAAiC;EACnC;AACF;;AAEA;EACE,qBAAqB;EACrB,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;;EAEE,kBAAkB;EAClB,iBAAiB;EACjB,uBAAuB;EACvB,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;;EAEE,YAAY;EACZ,uBAAuB;AACzB;AACA;EACE,kBAAkB;EAClB,uBAAuB;AACzB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");\n\n@font-face {\n  font-family: Astronomus;\n  src: url(fonts/Astronomus.ttf);\n}\n\n* {\n  font-family: "Poppins", sans-serif;\n}\n.board-container {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n.board {\n  border-collapse: collapse;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #333;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n/* .cell:hover {\n  background-color: #eee;\n} */\n.ship {\n  background-color: rgba(45, 199, 255, 0.62);\n}\n\n.ship-position-prohibited {\n  background-color: rgba(255, 60, 60, 0.62);\n}\n.ship-position-allowed {\n  background-color: rgba(61, 255, 90, 0.62);\n}\n/* Missed cell */\n.missed {\n  position: relative;\n  background-color: #ebebeb;\n}\n\n.missed::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  background-color: #343434; /* Color of the dot */\n  border-radius: 50%; /* Make it a circle */\n}\n\n/* Hit cell */\n.hit {\n  position: relative;\n  background-color: #ffe4df;\n}\n\n.hit::before,\n.hit::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 12px;\n  height: 2px;\n  background-color: #f34628; /* Color of the cross */\n}\n\n.hit::before {\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n\n.hit::after {\n  transform: translate(-50%, -50%) rotate(-45deg);\n}\nheader h1 {\n  margin: 20px;\n  font-size: 60px;\n  font-family: Astronomus;\n  text-transform: uppercase;\n}\na {\n  margin-left: 5px;\n  color: black;\n}\ni {\n  font-size: 55px;\n}\n/* BOX INFO */\n\n.box-info,\n.player-box,\n.computer-box {\n  margin: 20px;\n}\n.box-info {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n\n.title {\n  text-align: center;\n  font-size: 35px;\n  font-weight: bold;\n}\n.state > p:first-child {\n  font-size: 20px;\n  text-align: center;\n  margin: 10px;\n  font-weight: 600;\n}\n\n.current-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ship-direction {\n  color: rgb(2, 209, 255);\n  background-color: white;\n  border: 1px solid rgb(2, 209, 255);\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n}\n\n/* BOX DIALOG */\n\n/*   Open state of the dialog  */\ndialog[open] {\n  opacity: 1;\n  transform: scaleY(1);\n}\n\n/*   Closed state of the dialog   */\ndialog {\n  opacity: 0;\n  transform: scaleY(0);\n  transition: opacity 0.7s ease-out, transform 0.7s ease-out,\n    overlay 0.7s ease-out allow-discrete, display 0.7s ease-out allow-discrete;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\n/*   Before-open state  */\n/* Needs to be after the previous dialog[open] rule to take effect,\n    as the specificity is the same */\n@starting-style {\n  dialog[open] {\n    opacity: 0;\n    transform: scaleY(0);\n  }\n}\n\n/* Transition the :backdrop when the dialog modal is promoted to the top layer */\ndialog::backdrop {\n  background-color: rgb(0 0 0 / 0%);\n  transition: display 0.7s allow-discrete, overlay 0.7s allow-discrete,\n    background-color 0.7s;\n  /* Equivalent to\n  transition: all 0.7s allow-discrete; */\n}\n\ndialog[open]::backdrop {\n  background-color: rgb(0 0 0 / 25%);\n}\n\n/* This starting-style rule cannot be nested inside the above selector\nbecause the nesting selector cannot represent pseudo-elements. */\n\n@starting-style {\n  dialog[open]::backdrop {\n    background-color: rgb(0 0 0 / 0%);\n  }\n}\n\nul {\n  list-style-type: none;\n  display: flex;\n  justify-content: space-around;\n}\n\nli {\n  display: flex;\n  align-items: center;\n}\nbutton.close,\nbutton.replay {\n  margin-left: 500px;\n  padding: 5px 10px;\n  background-color: white;\n  color: black;\n  border: 1px solid black;\n  border-radius: 3px;\n  font-weight: bold;\n  transition: 1000ms;\n}\n\nbutton.replay {\n  margin-left: 250px;\n}\n\nbutton.close,\nbutton.replay:hover {\n  color: white;\n  background-color: black;\n}\n#gameOverDialog h1 {\n  text-align: center;\n  font-family: Astronomus;\n}\n'],sourceRoot:""}]);const p=A},314:t=>{"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",o=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),o&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),o&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,o,r,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var A=[].concat(t[c]);o&&a[A[0]]||(void 0!==s&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=s),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),n.push(A))}},n}},417:t=>{"use strict";t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},354:t=>{"use strict";t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),s="/*# ".concat(r," */");return[n].concat([s]).join("\n")}return[n].join("\n")}},206:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/gameover.mp3"},949:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/hit.mp3"},143:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/incoming_missile.mp3"},411:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son1.mp3"},529:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son10.mp3"},132:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son2.mp3"},81:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son3.mp3"},730:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son4.mp3"},343:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son5.mp3"},616:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son6.mp3"},901:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son7.mp3"},742:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son8.mp3"},635:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const o=e.p+"sounds/son9.mp3"},72:t=>{"use strict";var n=[];function e(t){for(var e=-1,o=0;o<n.length;o++)if(n[o].identifier===t){e=o;break}return e}function o(t,o){for(var s={},a=[],i=0;i<t.length;i++){var l=t[i],c=o.base?l[0]+o.base:l[0],A=s[c]||0,d="".concat(c," ").concat(A);s[c]=A+1;var p=e(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var h=r(u,o);o.byIndex=i,n.splice(i,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function r(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,r){var s=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var i=e(s[a]);n[i].references--}for(var l=o(t,r),c=0;c<s.length;c++){var A=e(s[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}s=l}}},659:t=>{"use strict";var n={};t.exports=function(t,e){var o=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(e)}},540:t=>{"use strict";t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},56:(t,n,e)=>{"use strict";t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},825:t=>{"use strict";t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var o="";e.supports&&(o+="@supports (".concat(e.supports,") {")),e.media&&(o+="@media ".concat(e.media," {"));var r=void 0!==e.layer;r&&(o+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),o+=e.css,r&&(o+="}"),e.media&&(o+="}"),e.supports&&(o+="}");var s=e.sourceMap;s&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(o,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},113:t=>{"use strict";t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},746:(t,n,e)=>{var o={"./gameover.mp3":206,"./hit.mp3":949,"./incoming_missile.mp3":143,"./son1.mp3":411,"./son10.mp3":529,"./son2.mp3":132,"./son3.mp3":81,"./son4.mp3":730,"./son5.mp3":343,"./son6.mp3":616,"./son7.mp3":901,"./son8.mp3":742,"./son9.mp3":635};function r(t){var n=s(t);return e(n)}function s(t){if(!e.o(o,t)){var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}return o[t]}r.keys=function(){return Object.keys(o)},r.resolve=s,t.exports=r,r.id=746},456:(t,n,e)=>{"use strict";t.exports=e.p+"0c25656528a0623c0f72.ttf"}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var s=n[o]={id:o,exports:{}};return t[o](s,s.exports,e),s.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&(!t||!/^http(s?):/.test(t));)t=o[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{"use strict";const t=new Set,n=document.getElementById("gameOverDialog");class o{constructor(t=10){this.size=t,this.grid=Array.from({length:t},(()=>Array(t).fill(null))),this.ships=[],this.missedAttacks=[]}placeShip(t,n,e){const o=[];let r=n,a=e;for(let i=0;i<t.length;i++){if(s(n,e))throw new Error("Ship placement out of bounds.");if(null!==this.grid[a][r])throw new Error("Another ship is already placed here.");if(o.push([r,a]),"horizontal"===t.direction)r++;else{if("vertical"!==t.direction)throw new Error('Invalid direction. Use "horizontal" or "vertical".');a++}}o.forEach((([n,e])=>{this.grid[e][n]=t})),this.ships.push({ship:t,shipPositions:o})}canThisShipBePlacedHere(t,n,e){let o=parseInt(e),r=parseInt(n);for(let n=0;n<t.length;n++){if(s(o,r))return console.log("Ship placement out of bounds."),!1;if(null!==this.grid[r][o])return console.log(`PosX: ${o}, ${r}`),console.log("Another ship is already placed here."),!1;if("horizontal"===t.direction)o++;else{if("vertical"!==t.direction)return console.log("Invalid direction. Use 'horizontal' or 'vertical'"),!1;r++}}return console.log("Ok"),!0}receiveAttack(t,n){if(t<0||t>=this.size||n<0||n>=this.size)throw new Error("Attack out of bounds.");const e=this.grid[n][t];return null===e?(this.missedAttacks.push([t,n]),"Miss!"):(e.hit(),`Hit on ${e.name}!`)}haveAllShipsBeenSunk(){return this.ships.map((t=>t.ship.isSunk)).every((t=>!0===t))}displayBoard(t){let n=0;this.grid.forEach((e=>{const o=document.createElement("tr");let r=0;e.forEach((t=>{const e=document.createElement("td");e.classList.add("cell"),e.setAttribute("data-x",r),e.setAttribute("data-y",n),r++,o.appendChild(e)})),n++,t.appendChild(o)}))}}class r extends o{constructor(){super(),this.countAttackReceived=0}allowPlayerToAttackComputer(t,e,o){const r=Array.from(t.getElementsByClassName("cell")),s=t=>{this.countAttackReceived++,"Miss!"==this.receiveAttack(t.target.getAttribute("data-x"),t.target.getAttribute("data-y"))?t.target.classList.add("missed"):(t.target.classList.add("hit"),this.haveAllShipsBeenSunk()&&(n.querySelector("h2").textContent="Congratulations, you Win!!!",n.showModal(),i())),function(){let t=Math.floor(10*Math.random())+1;console.log(t),new Audio(`sounds/son${t}.mp3`).play()}(),this.countAttackReceived%5==0&&new Audio("sounds/incoming_missile.mp3").play(),this.attackPlayerBoard(e,o)};r.forEach((t=>{t.addEventListener("click",s)}))}attackPlayerBoard(e,o){setTimeout((()=>{const[r,s]=function(){let n,e;do{n=Math.floor(10*Math.random()),e=Math.floor(10*Math.random())}while(t.has(`${n}-${e}`));return t.add(`${n}-${e}`),[n,e]}();"Miss!"==e.receiveAttack(r,s)?o.querySelector(`td[data-x="${r}"][data-y="${s}"]`).classList.add("missed"):(o.querySelector(`td[data-x="${r}"][data-y="${s}"]`).classList.add("hit"),new Audio("sounds/hit.mp3").play()),e.haveAllShipsBeenSunk()&&(n.querySelector("h2").textContent="Sorry, you lose!!!",n.showModal(),i())}),1500)}}function s(t,n){return!(a(10).includes(parseInt(t))&&a(10).includes(parseInt(n)))}function a(t){var n=[];for(let e=0;e<t;e++)n.push(e);return n}function i(){new Audio("sounds/gameover.mp3").play()}class l{constructor(t,n,e="horizontal"){this.name=t,this.hits=0,this.length=n,this.direction=e,this.isSunk=!1}hit(){this.hits++,this.hits===this.length&&(this.isSunk=!0)}}class c{constructor(){this.shipDirectionButton=document.getElementById("ship-direction"),this.allPlayerShips=[],this.playerBoard=new o,this.computerBoard=new r,this.playerBoardDOM=document.getElementById("player-board"),this.computerBoardDOM=document.getElementById("computer-board"),this.currentPlayer="player",this.playerShipNamesAndLength=[["Battleship",5],["Kraken",4],["Bull Dog",3],["Titan",2],["Warrior",2],["Tiki",1]]}setUpBoards(){this.playerBoard.displayBoard(this.playerBoardDOM),this.computerBoard.displayBoard(this.computerBoardDOM),this.startPlaceShipProcess()}startPlaceShipProcess(){const t=this.playerBoardDOM.querySelectorAll(".cell");for(const n of t)this.addMouseOverEffectOn(n),this.addMouseOutEffectOn(n),this.addClickEffectOn(n)}addMouseOverEffectOn(t){t.addEventListener("mouseover",(()=>{if(this.playerShipNamesAndLength.length>0){const n=t.getAttribute("data-x"),e=t.getAttribute("data-y"),o=this.playerShipNamesAndLength[0];console.log(o);const r=new l(...o);if(r.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(r,e,n)){let t=parseInt(n),o=parseInt(e);for(let n=0;n<r.length;n++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.add("ship-position-allowed"),"horizontal"===r.direction?t++:o++}else{let t=parseInt(n),o=parseInt(e);for(let n=0;n<r.length;n++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.add("ship-position-prohibited"),"horizontal"===r.direction?t++:o++}}}))}addMouseOutEffectOn(t){t.addEventListener("mouseout",(()=>{if(this.playerShipNamesAndLength.length>0){const n=t.getAttribute("data-x"),e=t.getAttribute("data-y"),o=this.playerShipNamesAndLength[0];console.log(o);const r=new l(...o);if(r.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(r,e,n)){let t=parseInt(n),o=parseInt(e);for(let n=0;n<r.length;n++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.remove("ship-position-allowed"),"horizontal"===r.direction?t++:o++}else{let t=parseInt(n),o=parseInt(e);for(let n=0;n<r.length;n++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`).classList.remove("ship-position-prohibited"),"horizontal"===r.direction?t++:o++}}}))}addClickEffectOn(t){t.addEventListener("click",(()=>{if(this.playerShipNamesAndLength.length>0){const n=t.getAttribute("data-x"),e=t.getAttribute("data-y");if(this.playerBoard.canThisShipBePlacedHere(new l(...this.playerShipNamesAndLength[0],this.shipDirectionButton.textContent),e,n)){const t=this.playerShipNamesAndLength.shift();console.log(t);const o=new l(...t);if(o.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(o,e,n)){this.playerBoard.placeShip(o,n,e);let t=parseInt(n),r=parseInt(e);for(let n=0;n<o.length;n++){const n=this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${r}"]`);n.classList.remove("ship-position-allowed"),n.classList.add("ship"),"horizontal"===o.direction?t++:r++,0==this.playerShipNamesAndLength.length&&this.startGame()}document.getElementById("ship-left-to-place").textContent=`${this.playerShipNamesAndLength.length} ships left to place`}}}}))}startGame(){const t=new l("Buto",3,"vertical");this.computerBoard.placeShip(t,0,0),this.computerBoard.allowPlayerToAttackComputer(this.computerBoardDOM,this.playerBoard,this.playerBoardDOM)}}var A=e(72),d=e.n(A),p=e(825),u=e.n(p),h=e(659),f=e.n(h),g=e(56),m=e.n(g),C=e(540),E=e.n(C),y=e(113),B=e.n(y),b=e(208),v={};v.styleTagTransform=B(),v.setAttributes=m(),v.insert=f().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=E(),d()(b.A,v),b.A&&b.A.locals&&b.A.locals,e(746);const x=document.getElementById("dialog"),k=document.querySelector(".close"),w=document.querySelector(".replay"),S=document.getElementById("gameOverDialog"),O=document.getElementById("player-board"),M=document.getElementById("computer-board");k.addEventListener("click",(()=>{x.close()})),w.addEventListener("click",(function(){S.close(),O.textContent="",M.textContent="",(new c).setUpBoards()})),(new c).setUpBoards();const I=document.getElementById("ship-direction");I.addEventListener("click",(()=>{"horizontal"==I.textContent?I.textContent="vertical":I.textContent="horizontal"}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBVWxDLGlCQUFpQixTQU0zQixXQUNFLEVBQWVtQyxRQUNmbkQsRUFBZU0sWUFBYyxHQUM3QlIsRUFBaUJRLFlBQWMsSUFFaEIsSUFBSXFCLEdBRVpNLGFBQ1QsS0FadUIsSUFBSU4sR0FFWk0sY0FZZixNQUFNTCxFQUFzQnJKLFNBQVM2RSxlQUFlLGtCQUVwRHdFLEVBQW9CWixpQkFBaUIsU0FBUyxLQUNMLGNBQW5DWSxFQUFvQnRCLFlBQ3RCc0IsRUFBb0J0QixZQUFjLFdBRWxDc0IsRUFBb0J0QixZQUFjLFlBQ3BDLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zb3VuZHMvZ2FtZW92ZXIubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL2hpdC5tcDMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zb3VuZHMvaW5jb21pbmdfbWlzc2lsZS5tcDMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zb3VuZHMvc29uMS5tcDMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zb3VuZHMvc29uMTAubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjIubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjMubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjQubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjUubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjYubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjcubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjgubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc291bmRzL3NvbjkubXAzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zb3VuZHMvIHN5bmMgXFwuKG1wMyU3Q3dhdikkIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcImZvbnRzL0FzdHJvbm9tdXMudHRmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGltcG9ydCB1cmwoaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zOml0YWwsd2dodEAwLDEwMDswLDIwMDswLDMwMDswLDQwMDswLDUwMDswLDYwMDswLDcwMDswLDgwMDswLDkwMDsxLDEwMDsxLDIwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDYwMDsxLDcwMDsxLDgwMDsxLDkwMCZkaXNwbGF5PXN3YXApO1wiXSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBAZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IEFzdHJvbm9tdXM7XG4gIHNyYzogdXJsKCR7X19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fX30pO1xufVxuXG4qIHtcbiAgZm9udC1mYW1pbHk6IFwiUG9wcGluc1wiLCBzYW5zLXNlcmlmO1xufVxuLmJvYXJkLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuLmJvYXJkIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbn1cblxuLmNlbGwge1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBib3JkZXI6IDFweCBzb2xpZCAjMzMzO1xuICBmb250LXNpemU6IDIwcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLyogLmNlbGw6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xufSAqL1xuLnNoaXAge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDQ1LCAxOTksIDI1NSwgMC42Mik7XG59XG5cbi5zaGlwLXBvc2l0aW9uLXByb2hpYml0ZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgNjAsIDYwLCAwLjYyKTtcbn1cbi5zaGlwLXBvc2l0aW9uLWFsbG93ZWQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDYxLCAyNTUsIDkwLCAwLjYyKTtcbn1cbi8qIE1pc3NlZCBjZWxsICovXG4ubWlzc2VkIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWJlYmViO1xufVxuXG4ubWlzc2VkOjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gIHdpZHRoOiA4cHg7XG4gIGhlaWdodDogOHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzQzNDM0OyAvKiBDb2xvciBvZiB0aGUgZG90ICovXG4gIGJvcmRlci1yYWRpdXM6IDUwJTsgLyogTWFrZSBpdCBhIGNpcmNsZSAqL1xufVxuXG4vKiBIaXQgY2VsbCAqL1xuLmhpdCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZTRkZjtcbn1cblxuLmhpdDo6YmVmb3JlLFxuLmhpdDo6YWZ0ZXIge1xuICBjb250ZW50OiBcIlwiO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiA1MCU7XG4gIHdpZHRoOiAxMnB4O1xuICBoZWlnaHQ6IDJweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YzNDYyODsgLyogQ29sb3Igb2YgdGhlIGNyb3NzICovXG59XG5cbi5oaXQ6OmJlZm9yZSB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZSg0NWRlZyk7XG59XG5cbi5oaXQ6OmFmdGVyIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSkgcm90YXRlKC00NWRlZyk7XG59XG5oZWFkZXIgaDEge1xuICBtYXJnaW46IDIwcHg7XG4gIGZvbnQtc2l6ZTogNjBweDtcbiAgZm9udC1mYW1pbHk6IEFzdHJvbm9tdXM7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG59XG5hIHtcbiAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgY29sb3I6IGJsYWNrO1xufVxuaSB7XG4gIGZvbnQtc2l6ZTogNTVweDtcbn1cbi8qIEJPWCBJTkZPICovXG5cbi5ib3gtaW5mbyxcbi5wbGF5ZXItYm94LFxuLmNvbXB1dGVyLWJveCB7XG4gIG1hcmdpbjogMjBweDtcbn1cbi5ib3gtaW5mbyB7XG4gIGRpc3BsYXk6IGdyaWQ7XG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDIsIDFmcik7XG59XG5cbi50aXRsZSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAzNXB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cbi5zdGF0ZSA+IHA6Zmlyc3QtY2hpbGQge1xuICBmb250LXNpemU6IDIwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luOiAxMHB4O1xuICBmb250LXdlaWdodDogNjAwO1xufVxuXG4uY3VycmVudC1zdGF0ZSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuXG4jc2hpcC1kaXJlY3Rpb24ge1xuICBjb2xvcjogcmdiKDIsIDIwOSwgMjU1KTtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYigyLCAyMDksIDI1NSk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG59XG5cbi8qIEJPWCBESUFMT0cgKi9cblxuLyogICBPcGVuIHN0YXRlIG9mIHRoZSBkaWFsb2cgICovXG5kaWFsb2dbb3Blbl0ge1xuICBvcGFjaXR5OiAxO1xuICB0cmFuc2Zvcm06IHNjYWxlWSgxKTtcbn1cblxuLyogICBDbG9zZWQgc3RhdGUgb2YgdGhlIGRpYWxvZyAgICovXG5kaWFsb2cge1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2Zvcm06IHNjYWxlWSgwKTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjdzIGVhc2Utb3V0LCB0cmFuc2Zvcm0gMC43cyBlYXNlLW91dCxcbiAgICBvdmVybGF5IDAuN3MgZWFzZS1vdXQgYWxsb3ctZGlzY3JldGUsIGRpc3BsYXkgMC43cyBlYXNlLW91dCBhbGxvdy1kaXNjcmV0ZTtcbiAgLyogRXF1aXZhbGVudCB0b1xuICB0cmFuc2l0aW9uOiBhbGwgMC43cyBhbGxvdy1kaXNjcmV0ZTsgKi9cbn1cblxuLyogICBCZWZvcmUtb3BlbiBzdGF0ZSAgKi9cbi8qIE5lZWRzIHRvIGJlIGFmdGVyIHRoZSBwcmV2aW91cyBkaWFsb2dbb3Blbl0gcnVsZSB0byB0YWtlIGVmZmVjdCxcbiAgICBhcyB0aGUgc3BlY2lmaWNpdHkgaXMgdGhlIHNhbWUgKi9cbkBzdGFydGluZy1zdHlsZSB7XG4gIGRpYWxvZ1tvcGVuXSB7XG4gICAgb3BhY2l0eTogMDtcbiAgICB0cmFuc2Zvcm06IHNjYWxlWSgwKTtcbiAgfVxufVxuXG4vKiBUcmFuc2l0aW9uIHRoZSA6YmFja2Ryb3Agd2hlbiB0aGUgZGlhbG9nIG1vZGFsIGlzIHByb21vdGVkIHRvIHRoZSB0b3AgbGF5ZXIgKi9cbmRpYWxvZzo6YmFja2Ryb3Age1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCAwIDAgLyAwJSk7XG4gIHRyYW5zaXRpb246IGRpc3BsYXkgMC43cyBhbGxvdy1kaXNjcmV0ZSwgb3ZlcmxheSAwLjdzIGFsbG93LWRpc2NyZXRlLFxuICAgIGJhY2tncm91bmQtY29sb3IgMC43cztcbiAgLyogRXF1aXZhbGVudCB0b1xuICB0cmFuc2l0aW9uOiBhbGwgMC43cyBhbGxvdy1kaXNjcmV0ZTsgKi9cbn1cblxuZGlhbG9nW29wZW5dOjpiYWNrZHJvcCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwIDAgMCAvIDI1JSk7XG59XG5cbi8qIFRoaXMgc3RhcnRpbmctc3R5bGUgcnVsZSBjYW5ub3QgYmUgbmVzdGVkIGluc2lkZSB0aGUgYWJvdmUgc2VsZWN0b3JcbmJlY2F1c2UgdGhlIG5lc3Rpbmcgc2VsZWN0b3IgY2Fubm90IHJlcHJlc2VudCBwc2V1ZG8tZWxlbWVudHMuICovXG5cbkBzdGFydGluZy1zdHlsZSB7XG4gIGRpYWxvZ1tvcGVuXTo6YmFja2Ryb3Age1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigwIDAgMCAvIDAlKTtcbiAgfVxufVxuXG51bCB7XG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG59XG5cbmxpIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbmJ1dHRvbi5jbG9zZSxcbmJ1dHRvbi5yZXBsYXkge1xuICBtYXJnaW4tbGVmdDogNTAwcHg7XG4gIHBhZGRpbmc6IDVweCAxMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgY29sb3I6IGJsYWNrO1xuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgdHJhbnNpdGlvbjogMTAwMG1zO1xufVxuXG5idXR0b24ucmVwbGF5IHtcbiAgbWFyZ2luLWxlZnQ6IDI1MHB4O1xufVxuXG5idXR0b24uY2xvc2UsXG5idXR0b24ucmVwbGF5OmhvdmVyIHtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcbn1cbiNnYW1lT3ZlckRpYWxvZyBoMSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1mYW1pbHk6IEFzdHJvbm9tdXM7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7RUFDRSx1QkFBdUI7RUFDdkIsNENBQThCO0FBQ2hDOztBQUVBO0VBQ0Usa0NBQWtDO0FBQ3BDO0FBQ0E7RUFDRSxhQUFhO0VBQ2IsNkJBQTZCO0VBQzdCLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsZUFBZTtFQUNmLGVBQWU7QUFDakI7O0FBRUE7O0dBRUc7QUFDSDtFQUNFLDBDQUEwQztBQUM1Qzs7QUFFQTtFQUNFLHlDQUF5QztBQUMzQztBQUNBO0VBQ0UseUNBQXlDO0FBQzNDO0FBQ0EsZ0JBQWdCO0FBQ2hCO0VBQ0Usa0JBQWtCO0VBQ2xCLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7RUFDVCxnQ0FBZ0M7RUFDaEMsVUFBVTtFQUNWLFdBQVc7RUFDWCx5QkFBeUIsRUFBRSxxQkFBcUI7RUFDaEQsa0JBQWtCLEVBQUUscUJBQXFCO0FBQzNDOztBQUVBLGFBQWE7QUFDYjtFQUNFLGtCQUFrQjtFQUNsQix5QkFBeUI7QUFDM0I7O0FBRUE7O0VBRUUsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsU0FBUztFQUNULFdBQVc7RUFDWCxXQUFXO0VBQ1gseUJBQXlCLEVBQUUsdUJBQXVCO0FBQ3BEOztBQUVBO0VBQ0UsOENBQThDO0FBQ2hEOztBQUVBO0VBQ0UsK0NBQStDO0FBQ2pEO0FBQ0E7RUFDRSxZQUFZO0VBQ1osZUFBZTtFQUNmLHVCQUF1QjtFQUN2Qix5QkFBeUI7QUFDM0I7QUFDQTtFQUNFLGdCQUFnQjtFQUNoQixZQUFZO0FBQ2Q7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQSxhQUFhOztBQUViOzs7RUFHRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLGFBQWE7RUFDYixxQ0FBcUM7QUFDdkM7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSx1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLGtDQUFrQztFQUNsQyxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGtCQUFrQjtBQUNwQjs7QUFFQSxlQUFlOztBQUVmLGdDQUFnQztBQUNoQztFQUNFLFVBQVU7RUFDVixvQkFBb0I7QUFDdEI7O0FBRUEsbUNBQW1DO0FBQ25DO0VBQ0UsVUFBVTtFQUNWLG9CQUFvQjtFQUNwQjs4RUFDNEU7RUFDNUU7d0NBQ3NDO0FBQ3hDOztBQUVBLHlCQUF5QjtBQUN6QjtvQ0FDb0M7QUFDcEM7RUFDRTtJQUNFLFVBQVU7SUFDVixvQkFBb0I7RUFDdEI7QUFDRjs7QUFFQSxnRkFBZ0Y7QUFDaEY7RUFDRSxpQ0FBaUM7RUFDakM7eUJBQ3VCO0VBQ3ZCO3dDQUNzQztBQUN4Qzs7QUFFQTtFQUNFLGtDQUFrQztBQUNwQzs7QUFFQTtnRUFDZ0U7O0FBRWhFO0VBQ0U7SUFDRSxpQ0FBaUM7RUFDbkM7QUFDRjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixhQUFhO0VBQ2IsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjtBQUNBOztFQUVFLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxrQkFBa0I7QUFDcEI7O0FBRUE7O0VBRUUsWUFBWTtFQUNaLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1QjtBQUN6QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zOml0YWwsd2dodEAwLDEwMDswLDIwMDswLDMwMDswLDQwMDswLDUwMDswLDYwMDswLDcwMDswLDgwMDswLDkwMDsxLDEwMDsxLDIwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDYwMDsxLDcwMDsxLDgwMDsxLDkwMCZkaXNwbGF5PXN3YXBcXFwiKTtcXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBBc3Ryb25vbXVzO1xcbiAgc3JjOiB1cmwoZm9udHMvQXN0cm9ub211cy50dGYpO1xcbn1cXG5cXG4qIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiUG9wcGluc1xcXCIsIHNhbnMtc2VyaWY7XFxufVxcbi5ib2FyZC1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG59XFxuLmJvYXJkIHtcXG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxufVxcblxcbi5jZWxsIHtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLyogLmNlbGw6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcXG59ICovXFxuLnNoaXAge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg0NSwgMTk5LCAyNTUsIDAuNjIpO1xcbn1cXG5cXG4uc2hpcC1wb3NpdGlvbi1wcm9oaWJpdGVkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCA2MCwgNjAsIDAuNjIpO1xcbn1cXG4uc2hpcC1wb3NpdGlvbi1hbGxvd2VkIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoNjEsIDI1NSwgOTAsIDAuNjIpO1xcbn1cXG4vKiBNaXNzZWQgY2VsbCAqL1xcbi5taXNzZWQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ViZWJlYjtcXG59XFxuXFxuLm1pc3NlZDo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgd2lkdGg6IDhweDtcXG4gIGhlaWdodDogOHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzM0MzQzNDsgLyogQ29sb3Igb2YgdGhlIGRvdCAqL1xcbiAgYm9yZGVyLXJhZGl1czogNTAlOyAvKiBNYWtlIGl0IGEgY2lyY2xlICovXFxufVxcblxcbi8qIEhpdCBjZWxsICovXFxuLmhpdCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZlNGRmO1xcbn1cXG5cXG4uaGl0OjpiZWZvcmUsXFxuLmhpdDo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiAxMnB4O1xcbiAgaGVpZ2h0OiAycHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjM0NjI4OyAvKiBDb2xvciBvZiB0aGUgY3Jvc3MgKi9cXG59XFxuXFxuLmhpdDo6YmVmb3JlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZSg0NWRlZyk7XFxufVxcblxcbi5oaXQ6OmFmdGVyIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHJvdGF0ZSgtNDVkZWcpO1xcbn1cXG5oZWFkZXIgaDEge1xcbiAgbWFyZ2luOiAyMHB4O1xcbiAgZm9udC1zaXplOiA2MHB4O1xcbiAgZm9udC1mYW1pbHk6IEFzdHJvbm9tdXM7XFxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xcbn1cXG5hIHtcXG4gIG1hcmdpbi1sZWZ0OiA1cHg7XFxuICBjb2xvcjogYmxhY2s7XFxufVxcbmkge1xcbiAgZm9udC1zaXplOiA1NXB4O1xcbn1cXG4vKiBCT1ggSU5GTyAqL1xcblxcbi5ib3gtaW5mbyxcXG4ucGxheWVyLWJveCxcXG4uY29tcHV0ZXItYm94IHtcXG4gIG1hcmdpbjogMjBweDtcXG59XFxuLmJveC1pbmZvIHtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiAzNXB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcbi5zdGF0ZSA+IHA6Zmlyc3QtY2hpbGQge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgbWFyZ2luOiAxMHB4O1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLmN1cnJlbnQtc3RhdGUge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuI3NoaXAtZGlyZWN0aW9uIHtcXG4gIGNvbG9yOiByZ2IoMiwgMjA5LCAyNTUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMiwgMjA5LCAyNTUpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG5cXG4vKiBCT1ggRElBTE9HICovXFxuXFxuLyogICBPcGVuIHN0YXRlIG9mIHRoZSBkaWFsb2cgICovXFxuZGlhbG9nW29wZW5dIHtcXG4gIG9wYWNpdHk6IDE7XFxuICB0cmFuc2Zvcm06IHNjYWxlWSgxKTtcXG59XFxuXFxuLyogICBDbG9zZWQgc3RhdGUgb2YgdGhlIGRpYWxvZyAgICovXFxuZGlhbG9nIHtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2Zvcm06IHNjYWxlWSgwKTtcXG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC43cyBlYXNlLW91dCwgdHJhbnNmb3JtIDAuN3MgZWFzZS1vdXQsXFxuICAgIG92ZXJsYXkgMC43cyBlYXNlLW91dCBhbGxvdy1kaXNjcmV0ZSwgZGlzcGxheSAwLjdzIGVhc2Utb3V0IGFsbG93LWRpc2NyZXRlO1xcbiAgLyogRXF1aXZhbGVudCB0b1xcbiAgdHJhbnNpdGlvbjogYWxsIDAuN3MgYWxsb3ctZGlzY3JldGU7ICovXFxufVxcblxcbi8qICAgQmVmb3JlLW9wZW4gc3RhdGUgICovXFxuLyogTmVlZHMgdG8gYmUgYWZ0ZXIgdGhlIHByZXZpb3VzIGRpYWxvZ1tvcGVuXSBydWxlIHRvIHRha2UgZWZmZWN0LFxcbiAgICBhcyB0aGUgc3BlY2lmaWNpdHkgaXMgdGhlIHNhbWUgKi9cXG5Ac3RhcnRpbmctc3R5bGUge1xcbiAgZGlhbG9nW29wZW5dIHtcXG4gICAgb3BhY2l0eTogMDtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZVkoMCk7XFxuICB9XFxufVxcblxcbi8qIFRyYW5zaXRpb24gdGhlIDpiYWNrZHJvcCB3aGVuIHRoZSBkaWFsb2cgbW9kYWwgaXMgcHJvbW90ZWQgdG8gdGhlIHRvcCBsYXllciAqL1xcbmRpYWxvZzo6YmFja2Ryb3Age1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAgMCAwIC8gMCUpO1xcbiAgdHJhbnNpdGlvbjogZGlzcGxheSAwLjdzIGFsbG93LWRpc2NyZXRlLCBvdmVybGF5IDAuN3MgYWxsb3ctZGlzY3JldGUsXFxuICAgIGJhY2tncm91bmQtY29sb3IgMC43cztcXG4gIC8qIEVxdWl2YWxlbnQgdG9cXG4gIHRyYW5zaXRpb246IGFsbCAwLjdzIGFsbG93LWRpc2NyZXRlOyAqL1xcbn1cXG5cXG5kaWFsb2dbb3Blbl06OmJhY2tkcm9wIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYigwIDAgMCAvIDI1JSk7XFxufVxcblxcbi8qIFRoaXMgc3RhcnRpbmctc3R5bGUgcnVsZSBjYW5ub3QgYmUgbmVzdGVkIGluc2lkZSB0aGUgYWJvdmUgc2VsZWN0b3JcXG5iZWNhdXNlIHRoZSBuZXN0aW5nIHNlbGVjdG9yIGNhbm5vdCByZXByZXNlbnQgcHNldWRvLWVsZW1lbnRzLiAqL1xcblxcbkBzdGFydGluZy1zdHlsZSB7XFxuICBkaWFsb2dbb3Blbl06OmJhY2tkcm9wIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAgMCAwIC8gMCUpO1xcbiAgfVxcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbmxpIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5idXR0b24uY2xvc2UsXFxuYnV0dG9uLnJlcGxheSB7XFxuICBtYXJnaW4tbGVmdDogNTAwcHg7XFxuICBwYWRkaW5nOiA1cHggMTBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRyYW5zaXRpb246IDEwMDBtcztcXG59XFxuXFxuYnV0dG9uLnJlcGxheSB7XFxuICBtYXJnaW4tbGVmdDogMjUwcHg7XFxufVxcblxcbmJ1dHRvbi5jbG9zZSxcXG5idXR0b24ucmVwbGF5OmhvdmVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xcbn1cXG4jZ2FtZU92ZXJEaWFsb2cgaDEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1mYW1pbHk6IEFzdHJvbm9tdXM7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzb3VuZHMvZ2FtZW92ZXIubXAzXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNvdW5kcy9oaXQubXAzXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNvdW5kcy9pbmNvbWluZ19taXNzaWxlLm1wM1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzb3VuZHMvc29uMS5tcDNcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic291bmRzL3NvbjEwLm1wM1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzb3VuZHMvc29uMi5tcDNcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic291bmRzL3NvbjMubXAzXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNvdW5kcy9zb240Lm1wM1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzb3VuZHMvc29uNS5tcDNcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic291bmRzL3NvbjYubXAzXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNvdW5kcy9zb243Lm1wM1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzb3VuZHMvc29uOC5tcDNcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic291bmRzL3NvbjkubXAzXCI7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJ2YXIgbWFwID0ge1xuXHRcIi4vZ2FtZW92ZXIubXAzXCI6IDIwNixcblx0XCIuL2hpdC5tcDNcIjogOTQ5LFxuXHRcIi4vaW5jb21pbmdfbWlzc2lsZS5tcDNcIjogMTQzLFxuXHRcIi4vc29uMS5tcDNcIjogNDExLFxuXHRcIi4vc29uMTAubXAzXCI6IDUyOSxcblx0XCIuL3NvbjIubXAzXCI6IDEzMixcblx0XCIuL3NvbjMubXAzXCI6IDgxLFxuXHRcIi4vc29uNC5tcDNcIjogNzMwLFxuXHRcIi4vc29uNS5tcDNcIjogMzQzLFxuXHRcIi4vc29uNi5tcDNcIjogNjE2LFxuXHRcIi4vc29uNy5tcDNcIjogOTAxLFxuXHRcIi4vc29uOC5tcDNcIjogNzQyLFxuXHRcIi4vc29uOS5tcDNcIjogNjM1XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gNzQ2OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18uYiA9IGRvY3VtZW50LmJhc2VVUkkgfHwgc2VsZi5sb2NhdGlvbi5ocmVmO1xuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDc5MjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gU2V0IHRvIHN0b3JlIHVuaXF1ZSBwYWlycyBvZiBudW1iZXJzXG5jb25zdCBjaG9zZW5QYWlycyA9IG5ldyBTZXQoKTtcbmNvbnN0IGdhbWVPdmVyRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lT3ZlckRpYWxvZ1wiKTtcblxuZXhwb3J0IGNsYXNzIEdhbWVCb2FyZCB7XG4gIGNvbnN0cnVjdG9yKHNpemUgPSAxMCkge1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gICAgdGhpcy5ncmlkID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogc2l6ZSB9LCAoKSA9PiBBcnJheShzaXplKS5maWxsKG51bGwpKTtcbiAgICB0aGlzLnNoaXBzID0gW107XG4gICAgdGhpcy5taXNzZWRBdHRhY2tzID0gW107XG4gIH1cblxuICBwbGFjZVNoaXAoc2hpcCwgeCwgeSkge1xuICAgIGNvbnN0IHNoaXBQb3NpdGlvbnMgPSBbXTtcbiAgICBsZXQgcG9zWCA9IHg7XG4gICAgbGV0IHBvc1kgPSB5O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gQ2hlY2sgaWYgcG9zWCBvciBwb3NZIGFyZSBvdXQgb2YgYm91bmRzIG9mIHRoZSBncmlkXG5cbiAgICAgIGlmIChpc1Bvc2l0aW9uV2l0aGluQm91bmRzKHgsIHkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNoaXAgcGxhY2VtZW50IG91dCBvZiBib3VuZHMuXCIpO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgaWYgYW5vdGhlciBzaGlwIGlzIHBsYWNlZCBhdCB0aGUgcG9zc1ggYW5kIHBvc1lcbiAgICAgIGVsc2UgaWYgKHRoaXMuZ3JpZFtwb3NZXVtwb3NYXSAhPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbm90aGVyIHNoaXAgaXMgYWxyZWFkeSBwbGFjZWQgaGVyZS5cIik7XG4gICAgICB9XG4gICAgICBzaGlwUG9zaXRpb25zLnB1c2goW3Bvc1gsIHBvc1ldKTtcbiAgICAgIGlmIChzaGlwLmRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgcG9zWCsrO1xuICAgICAgfSBlbHNlIGlmIChzaGlwLmRpcmVjdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgIHBvc1krKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBkaXJlY3Rpb24uIFVzZSBcImhvcml6b250YWxcIiBvciBcInZlcnRpY2FsXCIuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2hpcFBvc2l0aW9ucy5mb3JFYWNoKChbcG9zWCwgcG9zWV0pID0+IHtcbiAgICAgIHRoaXMuZ3JpZFtwb3NZXVtwb3NYXSA9IHNoaXA7XG4gICAgfSk7XG5cbiAgICB0aGlzLnNoaXBzLnB1c2goeyBzaGlwLCBzaGlwUG9zaXRpb25zIH0pO1xuICB9XG4gIC8vIFRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGl0IGlzIHBvc3NpYmxlIHRvIHBsYWNlIHNoaXBzIGZyb20gYSBjb29yZGluYXRlLCBpdCBkb2VzIGFsbW9zdCB0aGUgc2FtZSB0aGluZyBhcyBwbGFjZVNoaXAgYnV0IGl0J3MganVzdCBmb3IgdGVzdFxuICBjYW5UaGlzU2hpcEJlUGxhY2VkSGVyZShzaGlwLCB5LCB4KSB7XG4gICAgbGV0IHBvc1ggPSBwYXJzZUludCh4KTtcbiAgICBsZXQgcG9zWSA9IHBhcnNlSW50KHkpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaXNQb3NpdGlvbldpdGhpbkJvdW5kcyhwb3NYLCBwb3NZKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNoaXAgcGxhY2VtZW50IG91dCBvZiBib3VuZHMuXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBpZiBhbm90aGVyIHNoaXAgaXMgcGxhY2VkIGF0IHRoZSBwb3NzWCBhbmQgcG9zWVxuICAgICAgZWxzZSBpZiAodGhpcy5ncmlkW3Bvc1ldW3Bvc1hdICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBQb3NYOiAke3Bvc1h9LCAke3Bvc1l9YCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQW5vdGhlciBzaGlwIGlzIGFscmVhZHkgcGxhY2VkIGhlcmUuXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoc2hpcC5kaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgIHBvc1grKztcbiAgICAgIH0gZWxzZSBpZiAoc2hpcC5kaXJlY3Rpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgICBwb3NZKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkludmFsaWQgZGlyZWN0aW9uLiBVc2UgJ2hvcml6b250YWwnIG9yICd2ZXJ0aWNhbCdcIik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJPa1wiKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJlY2VpdmVBdHRhY2soeCwgeSkge1xuICAgIGlmICh4IDwgMCB8fCB4ID49IHRoaXMuc2l6ZSB8fCB5IDwgMCB8fCB5ID49IHRoaXMuc2l6ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0YWNrIG91dCBvZiBib3VuZHMuXCIpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmdyaWRbeV1beF07XG5cbiAgICBpZiAodGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICB0aGlzLm1pc3NlZEF0dGFja3MucHVzaChbeCwgeV0pO1xuICAgICAgcmV0dXJuIFwiTWlzcyFcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmhpdCgpO1xuICAgICAgcmV0dXJuIGBIaXQgb24gJHt0YXJnZXQubmFtZX0hYDtcbiAgICB9XG4gIH1cbiAgaGF2ZUFsbFNoaXBzQmVlblN1bmsoKSB7XG4gICAgY29uc3Qgc3Vua0RhdGEgPSB0aGlzLnNoaXBzLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIGl0ZW0uc2hpcC5pc1N1bms7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3Vua0RhdGEuZXZlcnkoKHgpID0+IHggPT09IHRydWUpO1xuICB9XG5cbiAgZGlzcGxheUJvYXJkKHBsYWNlKSB7XG4gICAgLy8gVGhpcyBwYXJ0IG9mIHRoZSBjb2RlIHNob3VsZCBiZSBhZnRlciB0aGUgY3JlYXRpb24gb2YgdGhlIGdhbWUgYm9hcmRzIGFuZCBiZWZvcmUgcmVuZGVyaW5nIHRoZW1cblxuICAgIGxldCB5ID0gMDtcbiAgICB0aGlzLmdyaWQuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICBjb25zdCByb3dFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpO1xuICAgICAgbGV0IHggPSAwO1xuICAgICAgcm93LmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG5cbiAgICAgICAgY2VsbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XG4gICAgICAgIGNlbGxFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEteFwiLCB4KTtcbiAgICAgICAgY2VsbEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS15XCIsIHkpO1xuICAgICAgICB4Kys7XG5cbiAgICAgICAgcm93RWxlbWVudC5hcHBlbmRDaGlsZChjZWxsRWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIHkrKztcbiAgICAgIHBsYWNlLmFwcGVuZENoaWxkKHJvd0VsZW1lbnQpO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21wdXRlckdhbWVCb2FyZCBleHRlbmRzIEdhbWVCb2FyZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jb3VudEF0dGFja1JlY2VpdmVkID0gMDtcbiAgfVxuXG4gIGFsbG93UGxheWVyVG9BdHRhY2tDb21wdXRlcihjb21wdXRlckJvYXJkRE9NLCBwbGF5ZXJCb2FyZCwgcGxheWVyQm9hcmRET00pIHtcbiAgICBjb25zdCBhbGxPcHBvbmVudENlbGxzID0gQXJyYXkuZnJvbShcbiAgICAgIGNvbXB1dGVyQm9hcmRET00uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNlbGxcIilcbiAgICApO1xuICAgIC8vIERlZmluZSB0aGUgY2xpY2sgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxuICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9IChldmVudCkgPT4ge1xuICAgICAgdGhpcy5jb3VudEF0dGFja1JlY2VpdmVkKys7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMucmVjZWl2ZUF0dGFjayhcbiAgICAgICAgICBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwiZGF0YS14XCIpLFxuICAgICAgICAgIGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXlcIilcbiAgICAgICAgKSA9PSBcIk1pc3MhXCJcbiAgICAgICkge1xuICAgICAgICBldmVudC50YXJnZXQuY2xhc3NMaXN0LmFkZChcIm1pc3NlZFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xuICAgICAgICBpZiAodGhpcy5oYXZlQWxsU2hpcHNCZWVuU3VuaygpKSB7XG4gICAgICAgICAgZ2FtZU92ZXJEaWFsb2cucXVlcnlTZWxlY3RvcihcImgyXCIpLnRleHRDb250ZW50ID1cbiAgICAgICAgICAgIFwiQ29uZ3JhdHVsYXRpb25zLCB5b3UgV2luISEhXCI7XG4gICAgICAgICAgZ2FtZU92ZXJEaWFsb2cuc2hvd01vZGFsKCk7XG4gICAgICAgICAgcGxheUdhbWVPdmVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBsYXlBdWRpbygpO1xuXG4gICAgICAvLyBSZW1vdmUgdGhlIGNsaWNrIGV2ZW50IGxpc3RlbmVyIGFmdGVyIGNsaWNraW5nXG4gICAgICAvLyBhbGxPcHBvbmVudENlbGxzLmZvckVhY2goKG9wcG9uZW50Q2VsbCkgPT4ge1xuICAgICAgLy8gICBvcHBvbmVudENlbGwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrSGFuZGxlcik7XG4gICAgICAvLyB9KTtcbiAgICAgIGlmICh0aGlzLmNvdW50QXR0YWNrUmVjZWl2ZWQgJSA1ID09IDApIHtcbiAgICAgICAgbGV0IGF1ZGlvID0gbmV3IEF1ZGlvKGBzb3VuZHMvaW5jb21pbmdfbWlzc2lsZS5tcDNgKTtcbiAgICAgICAgYXVkaW8ucGxheSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5hdHRhY2tQbGF5ZXJCb2FyZChwbGF5ZXJCb2FyZCwgcGxheWVyQm9hcmRET00pO1xuICAgIH07XG5cbiAgICAvLyBBZGQgY2xpY2sgZXZlbnQgbGlzdGVuZXIgdG8gZWFjaCBlbGVtZW50XG4gICAgYWxsT3Bwb25lbnRDZWxscy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbGlja0hhbmRsZXIpO1xuICAgIH0pO1xuICB9XG4gIGF0dGFja1BsYXllckJvYXJkKHBsYXllckJvYXJkLCBwbGF5ZXJCb2FyZERPTSkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgW3gsIHldID0gY2hvb3NlUmFuZG9tTnVtYmVycygpO1xuICAgICAgaWYgKHBsYXllckJvYXJkLnJlY2VpdmVBdHRhY2soeCwgeSkgPT0gXCJNaXNzIVwiKSB7XG4gICAgICAgIHBsYXllckJvYXJkRE9NXG4gICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoYHRkW2RhdGEteD1cIiR7eH1cIl1bZGF0YS15PVwiJHt5fVwiXWApXG4gICAgICAgICAgLmNsYXNzTGlzdC5hZGQoXCJtaXNzZWRcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGF5ZXJCb2FyZERPTVxuICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKGB0ZFtkYXRhLXg9XCIke3h9XCJdW2RhdGEteT1cIiR7eX1cIl1gKVxuICAgICAgICAgIC5jbGFzc0xpc3QuYWRkKFwiaGl0XCIpO1xuICAgICAgICBsZXQgYXVkaW8gPSBuZXcgQXVkaW8oYHNvdW5kcy9oaXQubXAzYCk7XG4gICAgICAgIGF1ZGlvLnBsYXkoKTtcbiAgICAgIH1cbiAgICAgIGlmIChwbGF5ZXJCb2FyZC5oYXZlQWxsU2hpcHNCZWVuU3VuaygpKSB7XG4gICAgICAgIGdhbWVPdmVyRGlhbG9nLnF1ZXJ5U2VsZWN0b3IoXCJoMlwiKS50ZXh0Q29udGVudCA9IFwiU29ycnksIHlvdSBsb3NlISEhXCI7XG4gICAgICAgIGdhbWVPdmVyRGlhbG9nLnNob3dNb2RhbCgpO1xuICAgICAgICBwbGF5R2FtZU92ZXIoKTtcbiAgICAgIH1cbiAgICB9LCAxNTAwKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQb3NpdGlvbldpdGhpbkJvdW5kcyhwb3NYLCBwb3NZKSB7XG4gIHJldHVybiAhKFxuICAgIHJhbmdlKDEwKS5pbmNsdWRlcyhwYXJzZUludChwb3NYKSkgJiYgcmFuZ2UoMTApLmluY2x1ZGVzKHBhcnNlSW50KHBvc1kpKVxuICApO1xufVxuLy8gcmFuZ2UgaXMgYSBmdW5jdGlvbiB0aGF0IGJhc2ljYWxseSB0YWtlcyBhIG51bWJlcihuKSBhbmQgcmV0dXJuIGEgbGlzdCBvZiBhbGwgaW50ZWdlcnMgZnJvbSAwIHRvIG4gZXhjbHVkZWQuXG5mdW5jdGlvbiByYW5nZShuKSB7XG4gIHZhciBhbnMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBhbnMucHVzaChpKTtcbiAgfVxuICByZXR1cm4gYW5zO1xufVxuXG4vLyBGdW5jdGlvbiB0byBjaG9vc2UgdHdvIHJhbmRvbSBudW1iZXJzXG5mdW5jdGlvbiBjaG9vc2VSYW5kb21OdW1iZXJzKCkge1xuICBsZXQgcmFuZG9tTnVtYmVyMSwgcmFuZG9tTnVtYmVyMjtcblxuICAvLyBHZW5lcmF0ZSB1bmlxdWUgcmFuZG9tIG51bWJlcnNcbiAgZG8ge1xuICAgIHJhbmRvbU51bWJlcjEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgcmFuZG9tTnVtYmVyMiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgfSB3aGlsZSAoY2hvc2VuUGFpcnMuaGFzKGAke3JhbmRvbU51bWJlcjF9LSR7cmFuZG9tTnVtYmVyMn1gKSk7XG5cbiAgLy8gQWRkIHRoZSBjaG9zZW4gcGFpciB0byB0aGUgc2V0XG4gIGNob3NlblBhaXJzLmFkZChgJHtyYW5kb21OdW1iZXIxfS0ke3JhbmRvbU51bWJlcjJ9YCk7XG5cbiAgLy8gUmV0dXJuIHRoZSBjaG9zZW4gcGFpclxuICByZXR1cm4gW3JhbmRvbU51bWJlcjEsIHJhbmRvbU51bWJlcjJdO1xufVxuXG5mdW5jdGlvbiBwbGF5QXVkaW8oKSB7XG4gIGxldCBuID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApICsgMTtcbiAgY29uc29sZS5sb2cobik7XG4gIGxldCBhdWRpbyA9IG5ldyBBdWRpbyhgc291bmRzL3NvbiR7bn0ubXAzYCk7XG5cbiAgYXVkaW8ucGxheSgpO1xufVxuXG5mdW5jdGlvbiBwbGF5R2FtZU92ZXIoKSB7XG4gIGxldCBhdWRpbyA9IG5ldyBBdWRpbyhgc291bmRzL2dhbWVvdmVyLm1wM2ApO1xuICBhdWRpby5wbGF5KCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwIHtcbiAgY29uc3RydWN0b3IobmFtZSwgbGVuZ3RoLCBkaXJlY3Rpb24gPSBcImhvcml6b250YWxcIikge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5oaXRzID0gMDtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB0aGlzLmlzU3VuayA9IGZhbHNlO1xuICB9XG5cbiAgaGl0KCkge1xuICAgIHRoaXMuaGl0cysrO1xuICAgIGlmICh0aGlzLmhpdHMgPT09IHRoaXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmlzU3VuayA9IHRydWU7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wdXRlckdhbWVCb2FyZCwgR2FtZUJvYXJkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5pbXBvcnQgU2hpcCBmcm9tIFwiLi9zaGlwXCI7XG5leHBvcnQgY2xhc3MgR2FtZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2hpcERpcmVjdGlvbkJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2hpcC1kaXJlY3Rpb25cIik7XG4gICAgdGhpcy5hbGxQbGF5ZXJTaGlwcyA9IFtdO1xuICAgIHRoaXMucGxheWVyQm9hcmQgPSBuZXcgR2FtZUJvYXJkKCk7XG4gICAgdGhpcy5jb21wdXRlckJvYXJkID0gbmV3IENvbXB1dGVyR2FtZUJvYXJkKCk7XG4gICAgLy8gVGhlc2UgcmVwcmVzZW50cyB0aGUgcGxheWVycyBHYW1lQm9hcmRzIG9uIHRoZSBET01cbiAgICB0aGlzLnBsYXllckJvYXJkRE9NID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5ZXItYm9hcmRcIik7XG4gICAgdGhpcy5jb21wdXRlckJvYXJkRE9NID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb21wdXRlci1ib2FyZFwiKTtcbiAgICB0aGlzLmN1cnJlbnRQbGF5ZXIgPSBcInBsYXllclwiO1xuICAgIHRoaXMucGxheWVyU2hpcE5hbWVzQW5kTGVuZ3RoID0gW1xuICAgICAgW1wiQmF0dGxlc2hpcFwiLCA1XSxcbiAgICAgIFtcIktyYWtlblwiLCA0XSxcbiAgICAgIFtcIkJ1bGwgRG9nXCIsIDNdLFxuICAgICAgW1wiVGl0YW5cIiwgMl0sXG4gICAgICBbXCJXYXJyaW9yXCIsIDJdLFxuICAgICAgW1wiVGlraVwiLCAxXSxcbiAgICBdO1xuICB9XG5cbiAgc2V0VXBCb2FyZHMoKSB7XG4gICAgdGhpcy5wbGF5ZXJCb2FyZC5kaXNwbGF5Qm9hcmQodGhpcy5wbGF5ZXJCb2FyZERPTSk7XG4gICAgdGhpcy5jb21wdXRlckJvYXJkLmRpc3BsYXlCb2FyZCh0aGlzLmNvbXB1dGVyQm9hcmRET00pO1xuICAgIHRoaXMuc3RhcnRQbGFjZVNoaXBQcm9jZXNzKCk7XG4gIH1cblxuICBzdGFydFBsYWNlU2hpcFByb2Nlc3MoKSB7XG4gICAgY29uc3QgYWxsQ2VsbHMgPSB0aGlzLnBsYXllckJvYXJkRE9NLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2VsbFwiKTtcblxuICAgIGZvciAoY29uc3QgY2VsbCBvZiBhbGxDZWxscykge1xuICAgICAgdGhpcy5hZGRNb3VzZU92ZXJFZmZlY3RPbihjZWxsKTtcbiAgICAgIHRoaXMuYWRkTW91c2VPdXRFZmZlY3RPbihjZWxsKTtcbiAgICAgIHRoaXMuYWRkQ2xpY2tFZmZlY3RPbihjZWxsKTtcbiAgICB9XG4gIH1cbiAgYWRkTW91c2VPdmVyRWZmZWN0T24oY2VsbCkge1xuICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXJTaGlwTmFtZXNBbmRMZW5ndGgubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBkYXRhWCA9IGNlbGwuZ2V0QXR0cmlidXRlKFwiZGF0YS14XCIpO1xuICAgICAgICBjb25zdCBkYXRhWSA9IGNlbGwuZ2V0QXR0cmlidXRlKFwiZGF0YS15XCIpO1xuICAgICAgICBjb25zdCBzaGlwRGV0YWlscyA9IHRoaXMucGxheWVyU2hpcE5hbWVzQW5kTGVuZ3RoWzBdO1xuICAgICAgICBjb25zb2xlLmxvZyhzaGlwRGV0YWlscyk7XG4gICAgICAgIGNvbnN0IHNoaXBBID0gbmV3IFNoaXAoLi4uc2hpcERldGFpbHMpO1xuICAgICAgICBzaGlwQS5kaXJlY3Rpb24gPSB0aGlzLnNoaXBEaXJlY3Rpb25CdXR0b24udGV4dENvbnRlbnQ7XG4gICAgICAgIGlmICh0aGlzLnBsYXllckJvYXJkLmNhblRoaXNTaGlwQmVQbGFjZWRIZXJlKHNoaXBBLCBkYXRhWSwgZGF0YVgpKSB7XG4gICAgICAgICAgbGV0IHBvc1ggPSBwYXJzZUludChkYXRhWCk7XG4gICAgICAgICAgbGV0IHBvc1kgPSBwYXJzZUludChkYXRhWSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwQS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IHRoaXMucGxheWVyQm9hcmRET00ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgYHRkW2RhdGEteD1cIiR7cG9zWH1cIl1bZGF0YS15PVwiJHtwb3NZfVwiXWBcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZChcInNoaXAtcG9zaXRpb24tYWxsb3dlZFwiKTtcbiAgICAgICAgICAgIGlmIChzaGlwQS5kaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICAgIHBvc1grKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBvc1krKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IHBvc1ggPSBwYXJzZUludChkYXRhWCk7XG4gICAgICAgICAgbGV0IHBvc1kgPSBwYXJzZUludChkYXRhWSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwQS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IHRoaXMucGxheWVyQm9hcmRET00ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgYHRkW2RhdGEteD1cIiR7cG9zWH1cIl1bZGF0YS15PVwiJHtwb3NZfVwiXWBcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZChcInNoaXAtcG9zaXRpb24tcHJvaGliaXRlZFwiKTtcbiAgICAgICAgICAgIGlmIChzaGlwQS5kaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICAgIHBvc1grKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBvc1krKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBhZGRNb3VzZU91dEVmZmVjdE9uKGNlbGwpIHtcbiAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW91dFwiLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXJTaGlwTmFtZXNBbmRMZW5ndGgubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBkYXRhWCA9IGNlbGwuZ2V0QXR0cmlidXRlKFwiZGF0YS14XCIpO1xuICAgICAgICBjb25zdCBkYXRhWSA9IGNlbGwuZ2V0QXR0cmlidXRlKFwiZGF0YS15XCIpO1xuXG4gICAgICAgIGNvbnN0IHNoaXBEZXRhaWxzID0gdGhpcy5wbGF5ZXJTaGlwTmFtZXNBbmRMZW5ndGhbMF07XG4gICAgICAgIGNvbnNvbGUubG9nKHNoaXBEZXRhaWxzKTtcbiAgICAgICAgY29uc3Qgc2hpcEEgPSBuZXcgU2hpcCguLi5zaGlwRGV0YWlscyk7XG4gICAgICAgIHNoaXBBLmRpcmVjdGlvbiA9IHRoaXMuc2hpcERpcmVjdGlvbkJ1dHRvbi50ZXh0Q29udGVudDtcblxuICAgICAgICBpZiAodGhpcy5wbGF5ZXJCb2FyZC5jYW5UaGlzU2hpcEJlUGxhY2VkSGVyZShzaGlwQSwgZGF0YVksIGRhdGFYKSkge1xuICAgICAgICAgIGxldCBwb3NYID0gcGFyc2VJbnQoZGF0YVgpO1xuICAgICAgICAgIGxldCBwb3NZID0gcGFyc2VJbnQoZGF0YVkpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcEEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLnBsYXllckJvYXJkRE9NLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgIGB0ZFtkYXRhLXg9XCIke3Bvc1h9XCJdW2RhdGEteT1cIiR7cG9zWX1cIl1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgc2hpcC5jbGFzc0xpc3QucmVtb3ZlKFwic2hpcC1wb3NpdGlvbi1hbGxvd2VkXCIpO1xuICAgICAgICAgICAgaWYgKHNoaXBBLmRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgICAgICAgcG9zWCsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcG9zWSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgcG9zWCA9IHBhcnNlSW50KGRhdGFYKTtcbiAgICAgICAgICBsZXQgcG9zWSA9IHBhcnNlSW50KGRhdGFZKTtcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcEEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLnBsYXllckJvYXJkRE9NLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgIGB0ZFtkYXRhLXg9XCIke3Bvc1h9XCJdW2RhdGEteT1cIiR7cG9zWX1cIl1gXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5yZW1vdmUoXCJzaGlwLXBvc2l0aW9uLXByb2hpYml0ZWRcIik7XG4gICAgICAgICAgICBpZiAoc2hpcEEuZGlyZWN0aW9uID09PSBcImhvcml6b250YWxcIikge1xuICAgICAgICAgICAgICBwb3NYKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwb3NZKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhZGRDbGlja0VmZmVjdE9uKGNlbGwpIHtcbiAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5wbGF5ZXJTaGlwTmFtZXNBbmRMZW5ndGgubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBkYXRhWCA9IGNlbGwuZ2V0QXR0cmlidXRlKFwiZGF0YS14XCIpO1xuICAgICAgICBjb25zdCBkYXRhWSA9IGNlbGwuZ2V0QXR0cmlidXRlKFwiZGF0YS15XCIpO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBzaGlwIGNhbiBiZSBwbGFjZWQgYXQgdGhlIHBvc2l0aW9uIGRhdGFYIGFuZCBkYXRhWVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5wbGF5ZXJCb2FyZC5jYW5UaGlzU2hpcEJlUGxhY2VkSGVyZShcbiAgICAgICAgICAgIG5ldyBTaGlwKFxuICAgICAgICAgICAgICAuLi50aGlzLnBsYXllclNoaXBOYW1lc0FuZExlbmd0aFswXSxcbiAgICAgICAgICAgICAgdGhpcy5zaGlwRGlyZWN0aW9uQnV0dG9uLnRleHRDb250ZW50XG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZGF0YVksXG4gICAgICAgICAgICBkYXRhWFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgc2hpcERldGFpbHMgPSB0aGlzLnBsYXllclNoaXBOYW1lc0FuZExlbmd0aC5zaGlmdCgpO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHNoaXBEZXRhaWxzKTtcbiAgICAgICAgICBjb25zdCBzaGlwQSA9IG5ldyBTaGlwKC4uLnNoaXBEZXRhaWxzKTtcbiAgICAgICAgICBzaGlwQS5kaXJlY3Rpb24gPSB0aGlzLnNoaXBEaXJlY3Rpb25CdXR0b24udGV4dENvbnRlbnQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5wbGF5ZXJCb2FyZC5jYW5UaGlzU2hpcEJlUGxhY2VkSGVyZShzaGlwQSwgZGF0YVksIGRhdGFYKSkge1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJCb2FyZC5wbGFjZVNoaXAoc2hpcEEsIGRhdGFYLCBkYXRhWSk7XG5cbiAgICAgICAgICAgIGxldCBwb3NYID0gcGFyc2VJbnQoZGF0YVgpO1xuICAgICAgICAgICAgbGV0IHBvc1kgPSBwYXJzZUludChkYXRhWSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLnBsYXllckJvYXJkRE9NLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgYHRkW2RhdGEteD1cIiR7cG9zWH1cIl1bZGF0YS15PVwiJHtwb3NZfVwiXWBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgc2hpcC5jbGFzc0xpc3QucmVtb3ZlKFwic2hpcC1wb3NpdGlvbi1hbGxvd2VkXCIpO1xuXG4gICAgICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZChcInNoaXBcIik7XG4gICAgICAgICAgICAgIGlmIChzaGlwQS5kaXJlY3Rpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgICAgICAgICAgcG9zWCsrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc1krKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICh0aGlzLnBsYXllclNoaXBOYW1lc0FuZExlbmd0aC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRHYW1lKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgICAgICAgICAgICBcInNoaXAtbGVmdC10by1wbGFjZVwiXG4gICAgICAgICAgICApLnRleHRDb250ZW50ID0gYCR7dGhpcy5wbGF5ZXJTaGlwTmFtZXNBbmRMZW5ndGgubGVuZ3RofSBzaGlwcyBsZWZ0IHRvIHBsYWNlYDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzdGFydEdhbWUoKSB7XG4gICAgY29uc3Qgc2hpcEIgPSBuZXcgU2hpcChcIkJ1dG9cIiwgMywgXCJ2ZXJ0aWNhbFwiKTtcbiAgICB0aGlzLmNvbXB1dGVyQm9hcmQucGxhY2VTaGlwKHNoaXBCLCAwLCAwKTtcblxuICAgIHRoaXMuY29tcHV0ZXJCb2FyZC5hbGxvd1BsYXllclRvQXR0YWNrQ29tcHV0ZXIoXG4gICAgICB0aGlzLmNvbXB1dGVyQm9hcmRET00sXG4gICAgICB0aGlzLnBsYXllckJvYXJkLFxuICAgICAgdGhpcy5wbGF5ZXJCb2FyZERPTVxuICAgICk7XG4gICAgLy8gQ2hlY2sgaWYgYSBwbGF5ZXIgaGFzIFdvblxuICB9XG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBHYW1lIH0gZnJvbSBcIi4vZ2FtZVwiO1xuaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcbmNvbnN0IHNvdW5kRmlsZXMgPSByZXF1aXJlLmNvbnRleHQoXCIuL3NvdW5kcy9cIiwgdHJ1ZSwgL1xcLihtcDN8d2F2KSQvKTtcbmNvbnN0IGRpYWxvZ0VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpYWxvZ1wiKTtcbmNvbnN0IGNsb3NlQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jbG9zZVwiKTtcbmNvbnN0IHJlcGxheUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmVwbGF5XCIpO1xuY29uc3QgZ2FtZU92ZXJEaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVPdmVyRGlhbG9nXCIpO1xuY29uc3QgcGxheWVyQm9hcmRET00gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXllci1ib2FyZFwiKTtcbmNvbnN0IGNvbXB1dGVyQm9hcmRET00gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbXB1dGVyLWJvYXJkXCIpO1xuXG5jbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBkaWFsb2dFbGVtLmNsb3NlKCk7XG59KTtcblxucmVwbGF5QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwbGF5KTtcblxuY29uc3QgYmF0dGxlc2hpcEdhbWUgPSBuZXcgR2FtZSgpO1xuXG5iYXR0bGVzaGlwR2FtZS5zZXRVcEJvYXJkcygpO1xuXG5mdW5jdGlvbiBwbGF5KCkge1xuICBnYW1lT3ZlckRpYWxvZy5jbG9zZSgpO1xuICBwbGF5ZXJCb2FyZERPTS50ZXh0Q29udGVudCA9IFwiXCI7XG4gIGNvbXB1dGVyQm9hcmRET00udGV4dENvbnRlbnQgPSBcIlwiO1xuXG4gIGNvbnN0IGJhdHRsZSA9IG5ldyBHYW1lKCk7XG5cbiAgYmF0dGxlLnNldFVwQm9hcmRzKCk7XG59XG5cbmNvbnN0IHNoaXBEaXJlY3Rpb25CdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNoaXAtZGlyZWN0aW9uXCIpO1xuLy8gZGlhbG9nRWxlbS5zaG93TW9kYWwoKTtcbnNoaXBEaXJlY3Rpb25CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgaWYgKHNoaXBEaXJlY3Rpb25CdXR0b24udGV4dENvbnRlbnQgPT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICBzaGlwRGlyZWN0aW9uQnV0dG9uLnRleHRDb250ZW50ID0gXCJ2ZXJ0aWNhbFwiO1xuICB9IGVsc2Uge1xuICAgIHNoaXBEaXJlY3Rpb25CdXR0b24udGV4dENvbnRlbnQgPSBcImhvcml6b250YWxcIjtcbiAgfVxufSk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJjb2RlIiwia2V5cyIsIk9iamVjdCIsInJlc29sdmUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJuYyIsImNob3NlblBhaXJzIiwiU2V0IiwiZ2FtZU92ZXJEaWFsb2ciLCJnZXRFbGVtZW50QnlJZCIsIkdhbWVCb2FyZCIsImNvbnN0cnVjdG9yIiwic2l6ZSIsImdyaWQiLCJBcnJheSIsImZyb20iLCJmaWxsIiwic2hpcHMiLCJtaXNzZWRBdHRhY2tzIiwicGxhY2VTaGlwIiwic2hpcCIsIngiLCJ5Iiwic2hpcFBvc2l0aW9ucyIsInBvc1giLCJwb3NZIiwiaXNQb3NpdGlvbldpdGhpbkJvdW5kcyIsImRpcmVjdGlvbiIsImZvckVhY2giLCJjYW5UaGlzU2hpcEJlUGxhY2VkSGVyZSIsInBhcnNlSW50IiwiY29uc29sZSIsImxvZyIsInJlY2VpdmVBdHRhY2siLCJoaXQiLCJuYW1lIiwiaGF2ZUFsbFNoaXBzQmVlblN1bmsiLCJpc1N1bmsiLCJldmVyeSIsImRpc3BsYXlCb2FyZCIsInBsYWNlIiwicm93Iiwicm93RWxlbWVudCIsImNlbGwiLCJjZWxsRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsIkNvbXB1dGVyR2FtZUJvYXJkIiwic3VwZXIiLCJjb3VudEF0dGFja1JlY2VpdmVkIiwiYWxsb3dQbGF5ZXJUb0F0dGFja0NvbXB1dGVyIiwiY29tcHV0ZXJCb2FyZERPTSIsInBsYXllckJvYXJkIiwicGxheWVyQm9hcmRET00iLCJhbGxPcHBvbmVudENlbGxzIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImNsaWNrSGFuZGxlciIsImV2ZW50IiwiZ2V0QXR0cmlidXRlIiwidGV4dENvbnRlbnQiLCJzaG93TW9kYWwiLCJwbGF5R2FtZU92ZXIiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJBdWRpbyIsInBsYXkiLCJwbGF5QXVkaW8iLCJhdHRhY2tQbGF5ZXJCb2FyZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwicmFuZG9tTnVtYmVyMSIsInJhbmRvbU51bWJlcjIiLCJoYXMiLCJjaG9vc2VSYW5kb21OdW1iZXJzIiwicmFuZ2UiLCJpbmNsdWRlcyIsImFucyIsIlNoaXAiLCJoaXRzIiwiR2FtZSIsInNoaXBEaXJlY3Rpb25CdXR0b24iLCJhbGxQbGF5ZXJTaGlwcyIsImNvbXB1dGVyQm9hcmQiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU2hpcE5hbWVzQW5kTGVuZ3RoIiwic2V0VXBCb2FyZHMiLCJzdGFydFBsYWNlU2hpcFByb2Nlc3MiLCJhbGxDZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhZGRNb3VzZU92ZXJFZmZlY3RPbiIsImFkZE1vdXNlT3V0RWZmZWN0T24iLCJhZGRDbGlja0VmZmVjdE9uIiwiZGF0YVgiLCJkYXRhWSIsInNoaXBEZXRhaWxzIiwic2hpcEEiLCJzaGlmdCIsInN0YXJ0R2FtZSIsInNoaXBCIiwibG9jYWxzIiwiZGlhbG9nRWxlbSIsImNsb3NlQnRuIiwicmVwbGF5QnRuIiwiY2xvc2UiXSwic291cmNlUm9vdCI6IiJ9