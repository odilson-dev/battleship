(()=>{"use strict";var t={208:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap);"]),a.push([t.id,'* {\n  font-family: "Poppins", sans-serif;\n}\n.board-container {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n.board {\n  border-collapse: collapse;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #333;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n/* .cell:hover {\n  background-color: #eee;\n} */\n.ship {\n  background-color: rgba(45, 199, 255, 0.62);\n}\n\n.ship-position-prohibited {\n  background-color: rgba(255, 60, 60, 0.62);\n}\n.ship-position-allowed {\n  background-color: rgba(61, 255, 90, 0.62);\n}\n/* Missed cell */\n.missed {\n  position: relative;\n  background-color: #ebebeb;\n}\n\n.missed::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  background-color: #343434; /* Color of the dot */\n  border-radius: 50%; /* Make it a circle */\n}\n\n/* Hit cell */\n.hit {\n  position: relative;\n  background-color: #ffe4df;\n}\n\n.hit::before,\n.hit::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 12px;\n  height: 2px;\n  background-color: #f34628; /* Color of the cross */\n}\n\n.hit::before {\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n\n.hit::after {\n  transform: translate(-50%, -50%) rotate(-45deg);\n}\nheader h1 {\n  margin: 30px;\n  font-size: 40px;\n  text-align: center;\n  text-transform: uppercase;\n}\na {\n  margin-left: 10px;\n  color: black;\n}\ni {\n  font-size: 45px;\n}\n/* BOX INFO */\n\n.box-info,\n.player-box,\n.computer-box {\n  margin: 20px;\n}\n.box-info {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n\n.title {\n  text-align: center;\n  font-size: 35px;\n  font-weight: bold;\n}\n.state > p:first-child {\n  font-size: 20px;\n  text-align: center;\n  margin: 10px;\n  font-weight: 600;\n}\n\n.current-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ship-direction {\n  color: rgb(2, 209, 255);\n  background-color: white;\n  border: 1px solid rgb(2, 209, 255);\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,kCAAkC;AACpC;AACA;EACE,aAAa;EACb,6BAA6B;EAC7B,gBAAgB;AAClB;AACA;EACE,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,eAAe;EACf,eAAe;AACjB;;AAEA;;GAEG;AACH;EACE,0CAA0C;AAC5C;;AAEA;EACE,yCAAyC;AAC3C;AACA;EACE,yCAAyC;AAC3C;AACA,gBAAgB;AAChB;EACE,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,UAAU;EACV,WAAW;EACX,yBAAyB,EAAE,qBAAqB;EAChD,kBAAkB,EAAE,qBAAqB;AAC3C;;AAEA,aAAa;AACb;EACE,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;;EAEE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,WAAW;EACX,yBAAyB,EAAE,uBAAuB;AACpD;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,+CAA+C;AACjD;AACA;EACE,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,yBAAyB;AAC3B;AACA;EACE,iBAAiB;EACjB,YAAY;AACd;AACA;EACE,eAAe;AACjB;AACA,aAAa;;AAEb;;;EAGE,YAAY;AACd;AACA;EACE,aAAa;EACb,qCAAqC;AACvC;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,iBAAiB;AACnB;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kCAAkC;EAClC,eAAe;EACf,kBAAkB;EAClB,kBAAkB;AACpB",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");\n\n* {\n  font-family: "Poppins", sans-serif;\n}\n.board-container {\n  display: flex;\n  justify-content: space-around;\n  margin-top: 20px;\n}\n.board {\n  border-collapse: collapse;\n}\n\n.cell {\n  width: 40px;\n  height: 40px;\n  border: 1px solid #333;\n  font-size: 20px;\n  cursor: pointer;\n}\n\n/* .cell:hover {\n  background-color: #eee;\n} */\n.ship {\n  background-color: rgba(45, 199, 255, 0.62);\n}\n\n.ship-position-prohibited {\n  background-color: rgba(255, 60, 60, 0.62);\n}\n.ship-position-allowed {\n  background-color: rgba(61, 255, 90, 0.62);\n}\n/* Missed cell */\n.missed {\n  position: relative;\n  background-color: #ebebeb;\n}\n\n.missed::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 8px;\n  height: 8px;\n  background-color: #343434; /* Color of the dot */\n  border-radius: 50%; /* Make it a circle */\n}\n\n/* Hit cell */\n.hit {\n  position: relative;\n  background-color: #ffe4df;\n}\n\n.hit::before,\n.hit::after {\n  content: "";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 12px;\n  height: 2px;\n  background-color: #f34628; /* Color of the cross */\n}\n\n.hit::before {\n  transform: translate(-50%, -50%) rotate(45deg);\n}\n\n.hit::after {\n  transform: translate(-50%, -50%) rotate(-45deg);\n}\nheader h1 {\n  margin: 30px;\n  font-size: 40px;\n  text-align: center;\n  text-transform: uppercase;\n}\na {\n  margin-left: 10px;\n  color: black;\n}\ni {\n  font-size: 45px;\n}\n/* BOX INFO */\n\n.box-info,\n.player-box,\n.computer-box {\n  margin: 20px;\n}\n.box-info {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n}\n\n.title {\n  text-align: center;\n  font-size: 35px;\n  font-weight: bold;\n}\n.state > p:first-child {\n  font-size: 20px;\n  text-align: center;\n  margin: 10px;\n  font-weight: 600;\n}\n\n.current-state {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#ship-direction {\n  color: rgb(2, 209, 255);\n  background-color: white;\n  border: 1px solid rgb(2, 209, 255);\n  cursor: pointer;\n  margin-right: 10px;\n  border-radius: 3px;\n}\n'],sourceRoot:""}]);const s=a},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<t.length;c++){var A=[].concat(t[c]);r&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),n&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=n):A[2]=n),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},354:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var l=t[s],c=r.base?l[0]+r.base:l[0],A=i[c]||0,d="".concat(c," ").concat(A);i[c]=A+1;var p=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var u=o(h,r);r.byIndex=s,e.splice(s,0,{identifier:d,updater:u,references:1})}a.push(d)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var l=r(t,o),c=0;c<i.length;c++){var A=n(i[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=l}}},659:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{class t{constructor(t=10){this.size=t,this.grid=Array.from({length:t},(()=>Array(t).fill(null))),this.ships=[],this.missedAttacks=[]}placeShip(t,e,n){const o=[];let i=e,a=n;for(let s=0;s<t.length;s++){if(r(e,n))throw new Error("Ship placement out of bounds.");if(null!==this.grid[a][i])throw new Error("Another ship is already placed here.");if(o.push([i,a]),"horizontal"===t.direction)i++;else{if("vertical"!==t.direction)throw new Error('Invalid direction. Use "horizontal" or "vertical".');a++}}o.forEach((([e,n])=>{this.grid[n][e]=t})),this.ships.push({ship:t,shipPositions:o})}canThisShipBePlacedHere(t,e,n){let o=parseInt(n),i=parseInt(e);for(let e=0;e<t.length;e++){if(r(o,i))return console.log("Ship placement out of bounds."),!1;if(null!==this.grid[i][o])return console.log(`PosX: ${o}, ${i}`),console.log("Another ship is already placed here."),!1;if("horizontal"===t.direction)o++;else{if("vertical"!==t.direction)return console.log("Invalid direction. Use 'horizontal' or 'vertical'"),!1;i++}}return console.log("Ok"),!0}receiveAttack(t,e){if(t<0||t>=this.size||e<0||e>=this.size)throw new Error("Attack out of bounds.");const n=this.grid[e][t];return null===n?(this.missedAttacks.push([t,e]),"Miss!"):(n.hit(),`Hit on ${n.name}!`)}haveAllShipsBeenSunk(){return this.ships.map((t=>t.ship.isSunk)).every((t=>!0===t))}displayBoard(t){document.addEventListener("DOMContentLoaded",(()=>{let e=0;this.grid.forEach((n=>{const r=document.createElement("tr");let o=0;n.forEach((t=>{const n=document.createElement("td");n.classList.add("cell"),n.setAttribute("data-x",o),n.setAttribute("data-y",e),o++,r.appendChild(n)})),e++,t.appendChild(r)}))}))}}class e extends t{constructor(){super()}allowPlayerToAttackComputer(t){document.addEventListener("DOMContentLoaded",(()=>{Array.from(t.getElementsByClassName("cell")).forEach((t=>{t.addEventListener("click",(()=>{"Miss!"==this.receiveAttack(t.getAttribute("data-x"),t.getAttribute("data-y"))?t.classList.add("missed"):t.classList.add("hit")}))}))}))}}function r(t,e){return!(o(10).includes(parseInt(t))&&o(10).includes(parseInt(e)))}function o(t){var e=[];for(let n=0;n<t;n++)e.push(n);return e}class i{constructor(t,e,n="horizontal"){this.name=t,this.hits=0,this.length=e,this.direction=n,this.isSunk=!1}hit(){this.hits++,this.hits===this.length&&(this.isSunk=!0)}}var a=n(72),s=n.n(a),l=n(825),c=n.n(l),A=n(659),d=n.n(A),p=n(56),h=n.n(p),u=n(540),f=n.n(u),C=n(113),g=n.n(C),E=n(208),B={};B.styleTagTransform=g(),B.setAttributes=h(),B.insert=d().bind(null,"head"),B.domAPI=c(),B.insertStyleElement=f(),s()(E.A,B),E.A&&E.A.locals&&E.A.locals,(new class{constructor(){this.shipDirectionButton=document.getElementById("ship-direction"),this.allPlayerShips=[],this.playerBoard=new t,this.computerBoard=new e,this.playerBoardDOM=document.getElementById("player-board"),this.computerBoardDOM=document.getElementById("computer-board"),this.playerShipNamesAndLength=[["Battleship",5],["Kraken",4],["Bull Dog",3],["Titan",2],["Warrior",2],["Tiki",1]]}setUpBoards(){this.playerBoard.displayBoard(this.playerBoardDOM),this.computerBoard.displayBoard(this.computerBoardDOM),this.startPlaceShipProcess()}startPlaceShipProcess(){document.addEventListener("DOMContentLoaded",(()=>{const t=this.playerBoardDOM.querySelectorAll(".cell");for(const e of t)this.addMouseOverEffectOn(e),this.addMouseOutEffectOn(e),this.addClickEffectOn(e)}))}addMouseOverEffectOn(t){t.addEventListener("mouseover",(()=>{const e=t.getAttribute("data-x"),n=t.getAttribute("data-y"),r=this.playerShipNamesAndLength[0];console.log(r);const o=new i(...r);if(o.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(o,n,e)){let t=parseInt(e),r=parseInt(n);for(let e=0;e<o.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${r}"]`).classList.add("ship-position-allowed"),"horizontal"===o.direction?t++:r++}else{let t=parseInt(e),r=parseInt(n);for(let e=0;e<o.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${r}"]`).classList.add("ship-position-prohibited"),"horizontal"===o.direction?t++:r++}}))}addMouseOutEffectOn(t){t.addEventListener("mouseout",(()=>{const e=t.getAttribute("data-x"),n=t.getAttribute("data-y"),r=this.playerShipNamesAndLength[0];console.log(r);const o=new i(...r);if(o.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(o,n,e)){let t=parseInt(e),r=parseInt(n);for(let e=0;e<o.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${r}"]`).classList.remove("ship-position-allowed"),"horizontal"===o.direction?t++:r++}else{let t=parseInt(e),r=parseInt(n);for(let e=0;e<o.length;e++)this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${r}"]`).classList.remove("ship-position-prohibited"),"horizontal"===o.direction?t++:r++}}))}addClickEffectOn(t){t.addEventListener("click",(()=>{const e=t.getAttribute("data-x"),n=t.getAttribute("data-y");if(this.playerBoard.canThisShipBePlacedHere(new i(...this.playerShipNamesAndLength[0],this.shipDirectionButton.textContent),n,e)){const t=this.playerShipNamesAndLength.shift();console.log(t);const r=new i(...t);if(r.direction=this.shipDirectionButton.textContent,this.playerBoard.canThisShipBePlacedHere(r,n,e)){this.playerBoard.placeShip(r,e,n);let t=parseInt(e),o=parseInt(n);for(let e=0;e<r.length;e++){const e=this.playerBoardDOM.querySelector(`td[data-x="${t}"][data-y="${o}"]`);e.classList.remove("ship-position-allowed"),e.classList.add("ship"),"horizontal"===r.direction?t++:o++}document.getElementById("ship-left-to-place").textContent=`${this.playerShipNamesAndLength.length} ships left to place`}}}))}}).setUpBoards();const m=document.getElementById("ship-direction");m.addEventListener("click",(()=>{"horizontal"==m.textContent?m.textContent="vertical":m.textContent="horizontal"})),computerBoard.allowPlayerToAttackComputer(computerBoardDOM)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,